#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceData
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="PlanetWars")]
	public partial class DbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBattle(Battle instance);
    partial void UpdateBattle(Battle instance);
    partial void DeleteBattle(Battle instance);
    partial void InsertStarSystem(StarSystem instance);
    partial void UpdateStarSystem(StarSystem instance);
    partial void DeleteStarSystem(StarSystem instance);
    partial void InsertBattleEvent(BattleEvent instance);
    partial void UpdateBattleEvent(BattleEvent instance);
    partial void DeleteBattleEvent(BattleEvent instance);
    partial void InsertCelestialObject(CelestialObject instance);
    partial void UpdateCelestialObject(CelestialObject instance);
    partial void DeleteCelestialObject(CelestialObject instance);
    partial void InsertCelestialObjectEvent(CelestialObjectEvent instance);
    partial void UpdateCelestialObjectEvent(CelestialObjectEvent instance);
    partial void DeleteCelestialObjectEvent(CelestialObjectEvent instance);
    partial void InsertCelestialObjectLink(CelestialObjectLink instance);
    partial void UpdateCelestialObjectLink(CelestialObjectLink instance);
    partial void DeleteCelestialObjectLink(CelestialObjectLink instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertPlayerEvent(PlayerEvent instance);
    partial void UpdatePlayerEvent(PlayerEvent instance);
    partial void DeletePlayerEvent(PlayerEvent instance);
    partial void InsertSpringAccount(SpringAccount instance);
    partial void UpdateSpringAccount(SpringAccount instance);
    partial void DeleteSpringAccount(SpringAccount instance);
    partial void InsertConfig(Config instance);
    partial void UpdateConfig(Config instance);
    partial void DeleteConfig(Config instance);
    partial void InsertCelestialObjectStructure(CelestialObjectStructure instance);
    partial void UpdateCelestialObjectStructure(CelestialObjectStructure instance);
    partial void DeleteCelestialObjectStructure(CelestialObjectStructure instance);
    partial void InsertMothershipStructure(MothershipStructure instance);
    partial void UpdateMothershipStructure(MothershipStructure instance);
    partial void DeleteMothershipStructure(MothershipStructure instance);
    partial void InsertStarSystemTech(StarSystemTech instance);
    partial void UpdateStarSystemTech(StarSystemTech instance);
    partial void DeleteStarSystemTech(StarSystemTech instance);
    partial void InsertPlayerTechSpent(PlayerTechSpent instance);
    partial void UpdatePlayerTechSpent(PlayerTechSpent instance);
    partial void DeletePlayerTechSpent(PlayerTechSpent instance);
    partial void InsertFleetShip(FleetShip instance);
    partial void UpdateFleetShip(FleetShip instance);
    partial void DeleteFleetShip(FleetShip instance);
    partial void InsertCelestialObjectShip(CelestialObjectShip instance);
    partial void UpdateCelestialObjectShip(CelestialObjectShip instance);
    partial void DeleteCelestialObjectShip(CelestialObjectShip instance);
    partial void InsertTransit(Transit instance);
    partial void UpdateTransit(Transit instance);
    partial void DeleteTransit(Transit instance);
    partial void InsertFleet(Fleet instance);
    partial void UpdateFleet(Fleet instance);
    partial void DeleteFleet(Fleet instance);
    partial void InsertPopulationTransport(PopulationTransport instance);
    partial void UpdatePopulationTransport(PopulationTransport instance);
    partial void DeletePopulationTransport(PopulationTransport instance);
    partial void InsertStructureType(StructureType instance);
    partial void UpdateStructureType(StructureType instance);
    partial void DeleteStructureType(StructureType instance);
    partial void InsertShipType(ShipType instance);
    partial void UpdateShipType(ShipType instance);
    partial void DeleteShipType(ShipType instance);
    partial void InsertTech(Tech instance);
    partial void UpdateTech(Tech instance);
    partial void DeleteTech(Tech instance);
    #endregion
		
		public DbDataContext() : 
				base(global::ServiceData.Properties.Settings.Default.PlanetWarsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Battle> Battles
		{
			get
			{
				return this.GetTable<Battle>();
			}
		}
		
		public System.Data.Linq.Table<StarSystem> StarSystems
		{
			get
			{
				return this.GetTable<StarSystem>();
			}
		}
		
		public System.Data.Linq.Table<BattleEvent> BattleEvents
		{
			get
			{
				return this.GetTable<BattleEvent>();
			}
		}
		
		public System.Data.Linq.Table<CelestialObject> CelestialObjects
		{
			get
			{
				return this.GetTable<CelestialObject>();
			}
		}
		
		public System.Data.Linq.Table<CelestialObjectEvent> CelestialObjectEvents
		{
			get
			{
				return this.GetTable<CelestialObjectEvent>();
			}
		}
		
		public System.Data.Linq.Table<CelestialObjectLink> CelestialObjectLinks
		{
			get
			{
				return this.GetTable<CelestialObjectLink>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<PlayerEvent> PlayerEvents
		{
			get
			{
				return this.GetTable<PlayerEvent>();
			}
		}
		
		public System.Data.Linq.Table<SpringAccount> SpringAccounts
		{
			get
			{
				return this.GetTable<SpringAccount>();
			}
		}
		
		public System.Data.Linq.Table<Config> Configs
		{
			get
			{
				return this.GetTable<Config>();
			}
		}
		
		public System.Data.Linq.Table<CelestialObjectStructure> CelestialObjectStructures
		{
			get
			{
				return this.GetTable<CelestialObjectStructure>();
			}
		}
		
		public System.Data.Linq.Table<MothershipStructure> MothershipStructures
		{
			get
			{
				return this.GetTable<MothershipStructure>();
			}
		}
		
		public System.Data.Linq.Table<StarSystemTech> StarSystemTeches
		{
			get
			{
				return this.GetTable<StarSystemTech>();
			}
		}
		
		public System.Data.Linq.Table<PlayerTechSpent> PlayerTechSpents
		{
			get
			{
				return this.GetTable<PlayerTechSpent>();
			}
		}
		
		public System.Data.Linq.Table<FleetShip> FleetShips
		{
			get
			{
				return this.GetTable<FleetShip>();
			}
		}
		
		public System.Data.Linq.Table<CelestialObjectShip> CelestialObjectShips
		{
			get
			{
				return this.GetTable<CelestialObjectShip>();
			}
		}
		
		public System.Data.Linq.Table<Transit> Transits
		{
			get
			{
				return this.GetTable<Transit>();
			}
		}
		
		public System.Data.Linq.Table<Fleet> Fleets
		{
			get
			{
				return this.GetTable<Fleet>();
			}
		}
		
		public System.Data.Linq.Table<PopulationTransport> PopulationTransports
		{
			get
			{
				return this.GetTable<PopulationTransport>();
			}
		}
		
		public System.Data.Linq.Table<StructureType> StructureTypes
		{
			get
			{
				return this.GetTable<StructureType>();
			}
		}
		
		public System.Data.Linq.Table<ShipType> ShipTypes
		{
			get
			{
				return this.GetTable<ShipType>();
			}
		}
		
		public System.Data.Linq.Table<Tech> Teches
		{
			get
			{
				return this.GetTable<Tech>();
			}
		}
	}
	
	[Table(Name="dbo.Battle")]
	[DataContract()]
	public partial class Battle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BattleID;
		
		private System.Nullable<int> _CelestialObjectID;
		
		private bool _IsDone;
		
		private EntitySet<BattleEvent> _BattleEvents;
		
		private EntityRef<CelestialObject> _CelestialObject;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBattleIDChanging(int value);
    partial void OnBattleIDChanged();
    partial void OnCelestialObjectIDChanging(System.Nullable<int> value);
    partial void OnCelestialObjectIDChanged();
    partial void OnIsDoneChanging(bool value);
    partial void OnIsDoneChanged();
    #endregion
		
		public Battle()
		{
			this.Initialize();
		}
		
		[Column(Storage="_BattleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int BattleID
		{
			get
			{
				return this._BattleID;
			}
			set
			{
				if ((this._BattleID != value))
				{
					this.OnBattleIDChanging(value);
					this.SendPropertyChanging();
					this._BattleID = value;
					this.SendPropertyChanged("BattleID");
					this.OnBattleIDChanged();
				}
			}
		}
		
		[Column(Storage="_CelestialObjectID", DbType="int")]
		[DataMember(Order=2)]
		public System.Nullable<int> CelestialObjectID
		{
			get
			{
				return this._CelestialObjectID;
			}
			set
			{
				if ((this._CelestialObjectID != value))
				{
					if (this._CelestialObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCelestialObjectIDChanging(value);
					this.SendPropertyChanging();
					this._CelestialObjectID = value;
					this.SendPropertyChanged("CelestialObjectID");
					this.OnCelestialObjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsDone", DbType="bit NOT NULL")]
		[DataMember(Order=3)]
		public bool IsDone
		{
			get
			{
				return this._IsDone;
			}
			set
			{
				if ((this._IsDone != value))
				{
					this.OnIsDoneChanging(value);
					this.SendPropertyChanging();
					this._IsDone = value;
					this.SendPropertyChanged("IsDone");
					this.OnIsDoneChanged();
				}
			}
		}
		
		[Association(Name="Battle_BattleEvent", Storage="_BattleEvents", ThisKey="BattleID", OtherKey="BattleID")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<BattleEvent> BattleEvents
		{
			get
			{
				if ((this.serializing 
							&& (this._BattleEvents.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._BattleEvents;
			}
			set
			{
				this._BattleEvents.Assign(value);
			}
		}
		
		[Association(Name="CelestialObject_Battle", Storage="_CelestialObject", ThisKey="CelestialObjectID", OtherKey="CelestialObjectID", IsForeignKey=true)]
		public CelestialObject CelestialObject
		{
			get
			{
				return this._CelestialObject.Entity;
			}
			set
			{
				CelestialObject previousValue = this._CelestialObject.Entity;
				if (((previousValue != value) 
							|| (this._CelestialObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CelestialObject.Entity = null;
						previousValue.Battles.Remove(this);
					}
					this._CelestialObject.Entity = value;
					if ((value != null))
					{
						value.Battles.Add(this);
						this._CelestialObjectID = value.CelestialObjectID;
					}
					else
					{
						this._CelestialObjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CelestialObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BattleEvents(BattleEvent entity)
		{
			this.SendPropertyChanging();
			entity.Battle = this;
		}
		
		private void detach_BattleEvents(BattleEvent entity)
		{
			this.SendPropertyChanging();
			entity.Battle = null;
		}
		
		private void Initialize()
		{
			this._BattleEvents = new EntitySet<BattleEvent>(new Action<BattleEvent>(this.attach_BattleEvents), new Action<BattleEvent>(this.detach_BattleEvents));
			this._CelestialObject = default(EntityRef<CelestialObject>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.StarSystem")]
	[DataContract()]
	public partial class StarSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SystemID;
		
		private int _HomeStarID;
		
		private EntitySet<Player> _Players;
		
		private EntitySet<StarSystemTech> _StarSystemTeches;
		
		private EntityRef<CelestialObject> _CelestialObject;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSystemIDChanging(int value);
    partial void OnSystemIDChanged();
    partial void OnHomeStarIDChanging(int value);
    partial void OnHomeStarIDChanged();
    #endregion
		
		public StarSystem()
		{
			this.Initialize();
		}
		
		[Column(Storage="_SystemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int SystemID
		{
			get
			{
				return this._SystemID;
			}
			set
			{
				if ((this._SystemID != value))
				{
					this.OnSystemIDChanging(value);
					this.SendPropertyChanging();
					this._SystemID = value;
					this.SendPropertyChanged("SystemID");
					this.OnSystemIDChanged();
				}
			}
		}
		
		[Column(Storage="_HomeStarID", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int HomeStarID
		{
			get
			{
				return this._HomeStarID;
			}
			set
			{
				if ((this._HomeStarID != value))
				{
					if (this._CelestialObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHomeStarIDChanging(value);
					this.SendPropertyChanging();
					this._HomeStarID = value;
					this.SendPropertyChanged("HomeStarID");
					this.OnHomeStarIDChanged();
				}
			}
		}
		
		[Association(Name="StarSystem_Player", Storage="_Players", ThisKey="SystemID", OtherKey="SystemID")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<Player> Players
		{
			get
			{
				if ((this.serializing 
							&& (this._Players.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[Association(Name="StarSystem_StarSystemTech", Storage="_StarSystemTeches", ThisKey="SystemID", OtherKey="StarSystemID")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<StarSystemTech> StarSystemTeches
		{
			get
			{
				if ((this.serializing 
							&& (this._StarSystemTeches.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._StarSystemTeches;
			}
			set
			{
				this._StarSystemTeches.Assign(value);
			}
		}
		
		[Association(Name="CelestialObject_StarSystem", Storage="_CelestialObject", ThisKey="HomeStarID", OtherKey="CelestialObjectID", IsForeignKey=true)]
		public CelestialObject CelestialObject
		{
			get
			{
				return this._CelestialObject.Entity;
			}
			set
			{
				CelestialObject previousValue = this._CelestialObject.Entity;
				if (((previousValue != value) 
							|| (this._CelestialObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CelestialObject.Entity = null;
						previousValue.StarSystems = null;
					}
					this._CelestialObject.Entity = value;
					if ((value != null))
					{
						value.StarSystems = this;
						this._HomeStarID = value.CelestialObjectID;
					}
					else
					{
						this._HomeStarID = default(int);
					}
					this.SendPropertyChanged("CelestialObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.StarSystem = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.StarSystem = null;
		}
		
		private void attach_StarSystemTeches(StarSystemTech entity)
		{
			this.SendPropertyChanging();
			entity.StarSystem = this;
		}
		
		private void detach_StarSystemTeches(StarSystemTech entity)
		{
			this.SendPropertyChanging();
			entity.StarSystem = null;
		}
		
		private void Initialize()
		{
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._StarSystemTeches = new EntitySet<StarSystemTech>(new Action<StarSystemTech>(this.attach_StarSystemTeches), new Action<StarSystemTech>(this.detach_StarSystemTeches));
			this._CelestialObject = default(EntityRef<CelestialObject>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.BattleEvent")]
	[DataContract()]
	public partial class BattleEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BattleID;
		
		private int _EventID;
		
		private EntityRef<Battle> _Battle;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBattleIDChanging(int value);
    partial void OnBattleIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    #endregion
		
		public BattleEvent()
		{
			this.Initialize();
		}
		
		[Column(Storage="_BattleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int BattleID
		{
			get
			{
				return this._BattleID;
			}
			set
			{
				if ((this._BattleID != value))
				{
					if (this._Battle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBattleIDChanging(value);
					this.SendPropertyChanging();
					this._BattleID = value;
					this.SendPropertyChanged("BattleID");
					this.OnBattleIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Association(Name="Battle_BattleEvent", Storage="_Battle", ThisKey="BattleID", OtherKey="BattleID", IsForeignKey=true)]
		public Battle Battle
		{
			get
			{
				return this._Battle.Entity;
			}
			set
			{
				Battle previousValue = this._Battle.Entity;
				if (((previousValue != value) 
							|| (this._Battle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Battle.Entity = null;
						previousValue.BattleEvents.Remove(this);
					}
					this._Battle.Entity = value;
					if ((value != null))
					{
						value.BattleEvents.Add(this);
						this._BattleID = value.BattleID;
					}
					else
					{
						this._BattleID = default(int);
					}
					this.SendPropertyChanged("Battle");
				}
			}
		}
		
		[Association(Name="Event_BattleEvent", Storage="_Event", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.BattleEvents.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.BattleEvents.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Battle = default(EntityRef<Battle>);
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.CelestialObject")]
	[DataContract()]
	public partial class CelestialObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CelestialObjectID;
		
		private CelestialObjectType _CelestialObjectType;
		
		private double _OrbitSpeed;
		
		private double _OrbitDistance;
		
		private double _OrbitInitialAngle;
		
		private System.Nullable<int> _ParentObject;
		
		private string _Name;
		
		private double _X;
		
		private double _Y;
		
		private double _MetalDensity;
		
		private double _FoodDensity;
		
		private double _QuantiumDensity;
		
		private double _DarkMatterDensity;
		
		private int _Size;
		
		private System.Nullable<int> _OwnerID;
		
		private bool _IsStargate;
		
		private int _Population;
		
		private bool _IsConnected;
		
		private double _HitpointsDamaged;
		
		private int _MaxPopulation;
		
		private double _MetalIncome;
		
		private double _FoodIncome;
		
		private double _QuantiumIncome;
		
		private double _DarkMatterIncome;
		
		private string _UserName;
		
		private double _Efficiency;
		
		private double _Buildpower;
		
		private double _ResearchIncome;
		
		private EntitySet<Battle> _Battles;
		
		private EntityRef<StarSystem> _StarSystems;
		
		private EntitySet<CelestialObject> _CelestialObjects;
		
		private EntitySet<CelestialObjectEvent> _CelestialObjectEvents;
		
		private EntitySet<CelestialObjectLink> _CelestialObjectLinks;
		
		private EntitySet<CelestialObjectLink> _CelestialObjectLinks1;
		
		private EntitySet<Player> _Players;
		
		private EntitySet<CelestialObjectStructure> _CelestialObjectStructures;
		
		private EntitySet<CelestialObjectShip> _CelestialObjectShips;
		
		private EntitySet<Transit> _Transits;
		
		private EntitySet<Transit> _Transits1;
		
		private EntitySet<Fleet> _Fleets;
		
		private EntityRef<CelestialObject> _CelestialObject1;
		
		private EntityRef<Player> _Player;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCelestialObjectIDChanging(int value);
    partial void OnCelestialObjectIDChanged();
    partial void OnCelestialObjectTypeChanging(CelestialObjectType value);
    partial void OnCelestialObjectTypeChanged();
    partial void OnOrbitSpeedChanging(double value);
    partial void OnOrbitSpeedChanged();
    partial void OnOrbitDistanceChanging(double value);
    partial void OnOrbitDistanceChanged();
    partial void OnOrbitInitialAngleChanging(double value);
    partial void OnOrbitInitialAngleChanged();
    partial void OnParentObjectChanging(System.Nullable<int> value);
    partial void OnParentObjectChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnXChanging(double value);
    partial void OnXChanged();
    partial void OnYChanging(double value);
    partial void OnYChanged();
    partial void OnMetalDensityChanging(double value);
    partial void OnMetalDensityChanged();
    partial void OnFoodDensityChanging(double value);
    partial void OnFoodDensityChanged();
    partial void OnQuantiumDensityChanging(double value);
    partial void OnQuantiumDensityChanged();
    partial void OnDarkMatterDensityChanging(double value);
    partial void OnDarkMatterDensityChanged();
    partial void OnSizeChanging(int value);
    partial void OnSizeChanged();
    partial void OnOwnerIDChanging(System.Nullable<int> value);
    partial void OnOwnerIDChanged();
    partial void OnIsStargateChanging(bool value);
    partial void OnIsStargateChanged();
    partial void OnPopulationChanging(int value);
    partial void OnPopulationChanged();
    partial void OnIsConnectedChanging(bool value);
    partial void OnIsConnectedChanged();
    partial void OnHitpointsDamagedChanging(double value);
    partial void OnHitpointsDamagedChanged();
    partial void OnMaxPopulationChanging(int value);
    partial void OnMaxPopulationChanged();
    partial void OnMetalIncomeChanging(double value);
    partial void OnMetalIncomeChanged();
    partial void OnFoodIncomeChanging(double value);
    partial void OnFoodIncomeChanged();
    partial void OnQuantiumIncomeChanging(double value);
    partial void OnQuantiumIncomeChanged();
    partial void OnDarkMatterIncomeChanging(double value);
    partial void OnDarkMatterIncomeChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEfficiencyChanging(double value);
    partial void OnEfficiencyChanged();
    partial void OnBuildpowerChanging(double value);
    partial void OnBuildpowerChanged();
    partial void OnResearchIncomeChanging(double value);
    partial void OnResearchIncomeChanged();
    #endregion
		
		public CelestialObject()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CelestialObjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int CelestialObjectID
		{
			get
			{
				return this._CelestialObjectID;
			}
			set
			{
				if ((this._CelestialObjectID != value))
				{
					this.OnCelestialObjectIDChanging(value);
					this.SendPropertyChanging();
					this._CelestialObjectID = value;
					this.SendPropertyChanged("CelestialObjectID");
					this.OnCelestialObjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_CelestialObjectType", DbType="Int NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public CelestialObjectType CelestialObjectType
		{
			get
			{
				return this._CelestialObjectType;
			}
			set
			{
				if ((this._CelestialObjectType != value))
				{
					this.OnCelestialObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._CelestialObjectType = value;
					this.SendPropertyChanged("CelestialObjectType");
					this.OnCelestialObjectTypeChanged();
				}
			}
		}
		
		[Column(Storage="_OrbitSpeed", DbType="Float NOT NULL")]
		[DataMember(Order=3)]
		public double OrbitSpeed
		{
			get
			{
				return this._OrbitSpeed;
			}
			set
			{
				if ((this._OrbitSpeed != value))
				{
					this.OnOrbitSpeedChanging(value);
					this.SendPropertyChanging();
					this._OrbitSpeed = value;
					this.SendPropertyChanged("OrbitSpeed");
					this.OnOrbitSpeedChanged();
				}
			}
		}
		
		[Column(Storage="_OrbitDistance", DbType="Float NOT NULL")]
		[DataMember(Order=4)]
		public double OrbitDistance
		{
			get
			{
				return this._OrbitDistance;
			}
			set
			{
				if ((this._OrbitDistance != value))
				{
					this.OnOrbitDistanceChanging(value);
					this.SendPropertyChanging();
					this._OrbitDistance = value;
					this.SendPropertyChanged("OrbitDistance");
					this.OnOrbitDistanceChanged();
				}
			}
		}
		
		[Column(Storage="_OrbitInitialAngle", DbType="Float NOT NULL")]
		[DataMember(Order=5)]
		public double OrbitInitialAngle
		{
			get
			{
				return this._OrbitInitialAngle;
			}
			set
			{
				if ((this._OrbitInitialAngle != value))
				{
					this.OnOrbitInitialAngleChanging(value);
					this.SendPropertyChanging();
					this._OrbitInitialAngle = value;
					this.SendPropertyChanged("OrbitInitialAngle");
					this.OnOrbitInitialAngleChanged();
				}
			}
		}
		
		[Column(Storage="_ParentObject", DbType="Int")]
		[DataMember(Order=6)]
		public System.Nullable<int> ParentObject
		{
			get
			{
				return this._ParentObject;
			}
			set
			{
				if ((this._ParentObject != value))
				{
					if (this._CelestialObject1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentObjectChanging(value);
					this.SendPropertyChanging();
					this._ParentObject = value;
					this.SendPropertyChanged("ParentObject");
					this.OnParentObjectChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100)")]
		[DataMember(Order=7)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_X", DbType="Float NOT NULL")]
		[DataMember(Order=8)]
		public double X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this.OnXChanging(value);
					this.SendPropertyChanging();
					this._X = value;
					this.SendPropertyChanged("X");
					this.OnXChanged();
				}
			}
		}
		
		[Column(Storage="_Y", DbType="Float NOT NULL")]
		[DataMember(Order=9)]
		public double Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this.OnYChanging(value);
					this.SendPropertyChanging();
					this._Y = value;
					this.SendPropertyChanged("Y");
					this.OnYChanged();
				}
			}
		}
		
		[Column(Storage="_MetalDensity", DbType="Float NOT NULL")]
		[DataMember(Order=10)]
		public double MetalDensity
		{
			get
			{
				return this._MetalDensity;
			}
			set
			{
				if ((this._MetalDensity != value))
				{
					this.OnMetalDensityChanging(value);
					this.SendPropertyChanging();
					this._MetalDensity = value;
					this.SendPropertyChanged("MetalDensity");
					this.OnMetalDensityChanged();
				}
			}
		}
		
		[Column(Storage="_FoodDensity", DbType="Float NOT NULL")]
		[DataMember(Order=11)]
		public double FoodDensity
		{
			get
			{
				return this._FoodDensity;
			}
			set
			{
				if ((this._FoodDensity != value))
				{
					this.OnFoodDensityChanging(value);
					this.SendPropertyChanging();
					this._FoodDensity = value;
					this.SendPropertyChanged("FoodDensity");
					this.OnFoodDensityChanged();
				}
			}
		}
		
		[Column(Storage="_QuantiumDensity", DbType="Float NOT NULL")]
		[DataMember(Order=12)]
		public double QuantiumDensity
		{
			get
			{
				return this._QuantiumDensity;
			}
			set
			{
				if ((this._QuantiumDensity != value))
				{
					this.OnQuantiumDensityChanging(value);
					this.SendPropertyChanging();
					this._QuantiumDensity = value;
					this.SendPropertyChanged("QuantiumDensity");
					this.OnQuantiumDensityChanged();
				}
			}
		}
		
		[Column(Storage="_DarkMatterDensity", DbType="Float NOT NULL")]
		[DataMember(Order=13)]
		public double DarkMatterDensity
		{
			get
			{
				return this._DarkMatterDensity;
			}
			set
			{
				if ((this._DarkMatterDensity != value))
				{
					this.OnDarkMatterDensityChanging(value);
					this.SendPropertyChanging();
					this._DarkMatterDensity = value;
					this.SendPropertyChanged("DarkMatterDensity");
					this.OnDarkMatterDensityChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="Int NOT NULL")]
		[DataMember(Order=14)]
		public int Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerID", DbType="Int")]
		[DataMember(Order=15)]
		public System.Nullable<int> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsStargate", DbType="Bit NOT NULL")]
		[DataMember(Order=16)]
		public bool IsStargate
		{
			get
			{
				return this._IsStargate;
			}
			set
			{
				if ((this._IsStargate != value))
				{
					this.OnIsStargateChanging(value);
					this.SendPropertyChanging();
					this._IsStargate = value;
					this.SendPropertyChanged("IsStargate");
					this.OnIsStargateChanged();
				}
			}
		}
		
		[Column(Storage="_Population", DbType="int NOT NULL")]
		[DataMember(Order=17)]
		public int Population
		{
			get
			{
				return this._Population;
			}
			set
			{
				if ((this._Population != value))
				{
					this.OnPopulationChanging(value);
					this.SendPropertyChanging();
					this._Population = value;
					this.SendPropertyChanged("Population");
					this.OnPopulationChanged();
				}
			}
		}
		
		[Column(Storage="_IsConnected", DbType="bit NOT NULL")]
		[DataMember(Order=18)]
		public bool IsConnected
		{
			get
			{
				return this._IsConnected;
			}
			set
			{
				if ((this._IsConnected != value))
				{
					this.OnIsConnectedChanging(value);
					this.SendPropertyChanging();
					this._IsConnected = value;
					this.SendPropertyChanged("IsConnected");
					this.OnIsConnectedChanged();
				}
			}
		}
		
		[Column(Storage="_HitpointsDamaged", DbType="float NOT NULL")]
		[DataMember(Order=19)]
		public double HitpointsDamaged
		{
			get
			{
				return this._HitpointsDamaged;
			}
			set
			{
				if ((this._HitpointsDamaged != value))
				{
					this.OnHitpointsDamagedChanging(value);
					this.SendPropertyChanging();
					this._HitpointsDamaged = value;
					this.SendPropertyChanged("HitpointsDamaged");
					this.OnHitpointsDamagedChanged();
				}
			}
		}
		
		[Column(Storage="_MaxPopulation", DbType="int NOT NULL")]
		[DataMember(Order=20)]
		public int MaxPopulation
		{
			get
			{
				return this._MaxPopulation;
			}
			set
			{
				if ((this._MaxPopulation != value))
				{
					this.OnMaxPopulationChanging(value);
					this.SendPropertyChanging();
					this._MaxPopulation = value;
					this.SendPropertyChanged("MaxPopulation");
					this.OnMaxPopulationChanged();
				}
			}
		}
		
		[Column(Storage="_MetalIncome", DbType="float NOT NULL")]
		[DataMember(Order=21)]
		public double MetalIncome
		{
			get
			{
				return this._MetalIncome;
			}
			set
			{
				if ((this._MetalIncome != value))
				{
					this.OnMetalIncomeChanging(value);
					this.SendPropertyChanging();
					this._MetalIncome = value;
					this.SendPropertyChanged("MetalIncome");
					this.OnMetalIncomeChanged();
				}
			}
		}
		
		[Column(Storage="_FoodIncome", DbType="float NOT NULL")]
		[DataMember(Order=22)]
		public double FoodIncome
		{
			get
			{
				return this._FoodIncome;
			}
			set
			{
				if ((this._FoodIncome != value))
				{
					this.OnFoodIncomeChanging(value);
					this.SendPropertyChanging();
					this._FoodIncome = value;
					this.SendPropertyChanged("FoodIncome");
					this.OnFoodIncomeChanged();
				}
			}
		}
		
		[Column(Storage="_QuantiumIncome", DbType="float NOT NULL")]
		[DataMember(Order=23)]
		public double QuantiumIncome
		{
			get
			{
				return this._QuantiumIncome;
			}
			set
			{
				if ((this._QuantiumIncome != value))
				{
					this.OnQuantiumIncomeChanging(value);
					this.SendPropertyChanging();
					this._QuantiumIncome = value;
					this.SendPropertyChanged("QuantiumIncome");
					this.OnQuantiumIncomeChanged();
				}
			}
		}
		
		[Column(Storage="_DarkMatterIncome", DbType="float NOT NULL")]
		[DataMember(Order=24)]
		public double DarkMatterIncome
		{
			get
			{
				return this._DarkMatterIncome;
			}
			set
			{
				if ((this._DarkMatterIncome != value))
				{
					this.OnDarkMatterIncomeChanging(value);
					this.SendPropertyChanging();
					this._DarkMatterIncome = value;
					this.SendPropertyChanged("DarkMatterIncome");
					this.OnDarkMatterIncomeChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="nvarchar(100)")]
		[DataMember(Order=25)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Efficiency", DbType="float NOT NULL")]
		[DataMember(Order=26)]
		public double Efficiency
		{
			get
			{
				return this._Efficiency;
			}
			set
			{
				if ((this._Efficiency != value))
				{
					this.OnEfficiencyChanging(value);
					this.SendPropertyChanging();
					this._Efficiency = value;
					this.SendPropertyChanged("Efficiency");
					this.OnEfficiencyChanged();
				}
			}
		}
		
		[Column(Storage="_Buildpower", DbType="float NOT NULL")]
		[DataMember(Order=27)]
		public double Buildpower
		{
			get
			{
				return this._Buildpower;
			}
			set
			{
				if ((this._Buildpower != value))
				{
					this.OnBuildpowerChanging(value);
					this.SendPropertyChanging();
					this._Buildpower = value;
					this.SendPropertyChanged("Buildpower");
					this.OnBuildpowerChanged();
				}
			}
		}
		
		[Column(Storage="_ResearchIncome", DbType="float NOT NULL")]
		[DataMember(Order=28)]
		public double ResearchIncome
		{
			get
			{
				return this._ResearchIncome;
			}
			set
			{
				if ((this._ResearchIncome != value))
				{
					this.OnResearchIncomeChanging(value);
					this.SendPropertyChanging();
					this._ResearchIncome = value;
					this.SendPropertyChanged("ResearchIncome");
					this.OnResearchIncomeChanged();
				}
			}
		}
		
		[Association(Name="CelestialObject_Battle", Storage="_Battles", ThisKey="CelestialObjectID", OtherKey="CelestialObjectID")]
		[DataMember(Order=29, EmitDefaultValue=false)]
		public EntitySet<Battle> Battles
		{
			get
			{
				if ((this.serializing 
							&& (this._Battles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Battles;
			}
			set
			{
				this._Battles.Assign(value);
			}
		}
		
		[Association(Name="CelestialObject_StarSystem", Storage="_StarSystems", ThisKey="CelestialObjectID", OtherKey="HomeStarID", IsUnique=true, IsForeignKey=false)]
		[DataMember(Order=30, EmitDefaultValue=false)]
		public StarSystem StarSystems
		{
			get
			{
				if ((this.serializing 
							&& (this._StarSystems.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._StarSystems.Entity;
			}
			set
			{
				StarSystem previousValue = this._StarSystems.Entity;
				if (((previousValue != value) 
							|| (this._StarSystems.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StarSystems.Entity = null;
						previousValue.CelestialObject = null;
					}
					this._StarSystems.Entity = value;
					if ((value != null))
					{
						value.CelestialObject = this;
					}
					this.SendPropertyChanged("StarSystems");
				}
			}
		}
		
		[Association(Name="CelestialObject_CelestialObject", Storage="_CelestialObjects", ThisKey="CelestialObjectID", OtherKey="ParentObject")]
		[DataMember(Order=31, EmitDefaultValue=false)]
		public EntitySet<CelestialObject> CelestialObjects
		{
			get
			{
				if ((this.serializing 
							&& (this._CelestialObjects.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CelestialObjects;
			}
			set
			{
				this._CelestialObjects.Assign(value);
			}
		}
		
		[Association(Name="CelestialObject_CelestialObjectEvent", Storage="_CelestialObjectEvents", ThisKey="CelestialObjectID", OtherKey="ObjectID")]
		[DataMember(Order=32, EmitDefaultValue=false)]
		public EntitySet<CelestialObjectEvent> CelestialObjectEvents
		{
			get
			{
				if ((this.serializing 
							&& (this._CelestialObjectEvents.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CelestialObjectEvents;
			}
			set
			{
				this._CelestialObjectEvents.Assign(value);
			}
		}
		
		[Association(Name="CelestialObject_CelestialObjectLink", Storage="_CelestialObjectLinks", ThisKey="CelestialObjectID", OtherKey="FirstObjectID")]
		[DataMember(Order=33, EmitDefaultValue=false)]
		public EntitySet<CelestialObjectLink> CelestialObjectLinks
		{
			get
			{
				if ((this.serializing 
							&& (this._CelestialObjectLinks.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CelestialObjectLinks;
			}
			set
			{
				this._CelestialObjectLinks.Assign(value);
			}
		}
		
		[Association(Name="CelestialObject_CelestialObjectLink1", Storage="_CelestialObjectLinks1", ThisKey="CelestialObjectID", OtherKey="SecondObjectID")]
		[DataMember(Order=34, EmitDefaultValue=false)]
		public EntitySet<CelestialObjectLink> CelestialObjectLinks1
		{
			get
			{
				if ((this.serializing 
							&& (this._CelestialObjectLinks1.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CelestialObjectLinks1;
			}
			set
			{
				this._CelestialObjectLinks1.Assign(value);
			}
		}
		
		[Association(Name="CelestialObject_Player", Storage="_Players", ThisKey="CelestialObjectID", OtherKey="OrbitsObjectID")]
		[DataMember(Order=35, EmitDefaultValue=false)]
		public EntitySet<Player> Players
		{
			get
			{
				if ((this.serializing 
							&& (this._Players.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[Association(Name="CelestialObject_CelestialObjectStructure", Storage="_CelestialObjectStructures", ThisKey="CelestialObjectID", OtherKey="CelestialObjectID")]
		[DataMember(Order=36, EmitDefaultValue=false)]
		public EntitySet<CelestialObjectStructure> CelestialObjectStructures
		{
			get
			{
				if ((this.serializing 
							&& (this._CelestialObjectStructures.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CelestialObjectStructures;
			}
			set
			{
				this._CelestialObjectStructures.Assign(value);
			}
		}
		
		[Association(Name="CelestialObject_CelestialObjectShip", Storage="_CelestialObjectShips", ThisKey="CelestialObjectID", OtherKey="CelestialObjectID")]
		[DataMember(Order=37, EmitDefaultValue=false)]
		public EntitySet<CelestialObjectShip> CelestialObjectShips
		{
			get
			{
				if ((this.serializing 
							&& (this._CelestialObjectShips.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CelestialObjectShips;
			}
			set
			{
				this._CelestialObjectShips.Assign(value);
			}
		}
		
		[Association(Name="CelestialObject_Transit", Storage="_Transits", ThisKey="CelestialObjectID", OtherKey="FromObjectID")]
		[DataMember(Order=38, EmitDefaultValue=false)]
		public EntitySet<Transit> Transits
		{
			get
			{
				if ((this.serializing 
							&& (this._Transits.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Transits;
			}
			set
			{
				this._Transits.Assign(value);
			}
		}
		
		[Association(Name="CelestialObject_Transit1", Storage="_Transits1", ThisKey="CelestialObjectID", OtherKey="ToObjectID")]
		[DataMember(Order=39, EmitDefaultValue=false)]
		public EntitySet<Transit> Transits1
		{
			get
			{
				if ((this.serializing 
							&& (this._Transits1.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Transits1;
			}
			set
			{
				this._Transits1.Assign(value);
			}
		}
		
		[Association(Name="CelestialObject_Fleet", Storage="_Fleets", ThisKey="CelestialObjectID", OtherKey="OrbitObjectID")]
		[DataMember(Order=40, EmitDefaultValue=false)]
		public EntitySet<Fleet> Fleets
		{
			get
			{
				if ((this.serializing 
							&& (this._Fleets.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Fleets;
			}
			set
			{
				this._Fleets.Assign(value);
			}
		}
		
		[Association(Name="CelestialObject_CelestialObject", Storage="_CelestialObject1", ThisKey="ParentObject", OtherKey="CelestialObjectID", IsForeignKey=true)]
		public CelestialObject CelestialObject1
		{
			get
			{
				return this._CelestialObject1.Entity;
			}
			set
			{
				CelestialObject previousValue = this._CelestialObject1.Entity;
				if (((previousValue != value) 
							|| (this._CelestialObject1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CelestialObject1.Entity = null;
						previousValue.CelestialObjects.Remove(this);
					}
					this._CelestialObject1.Entity = value;
					if ((value != null))
					{
						value.CelestialObjects.Add(this);
						this._ParentObject = value.CelestialObjectID;
					}
					else
					{
						this._ParentObject = default(Nullable<int>);
					}
					this.SendPropertyChanged("CelestialObject1");
				}
			}
		}
		
		[Association(Name="Player_CelestialObject", Storage="_Player", ThisKey="OwnerID", OtherKey="PlayerID", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.CelestialObjects.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.CelestialObjects.Add(this);
						this._OwnerID = value.PlayerID;
					}
					else
					{
						this._OwnerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Battles(Battle entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject = this;
		}
		
		private void detach_Battles(Battle entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject = null;
		}
		
		private void attach_CelestialObjects(CelestialObject entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject1 = this;
		}
		
		private void detach_CelestialObjects(CelestialObject entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject1 = null;
		}
		
		private void attach_CelestialObjectEvents(CelestialObjectEvent entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject = this;
		}
		
		private void detach_CelestialObjectEvents(CelestialObjectEvent entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject = null;
		}
		
		private void attach_CelestialObjectLinks(CelestialObjectLink entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject = this;
		}
		
		private void detach_CelestialObjectLinks(CelestialObjectLink entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject = null;
		}
		
		private void attach_CelestialObjectLinks1(CelestialObjectLink entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject1 = this;
		}
		
		private void detach_CelestialObjectLinks1(CelestialObjectLink entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject1 = null;
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject = null;
		}
		
		private void attach_CelestialObjectStructures(CelestialObjectStructure entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject = this;
		}
		
		private void detach_CelestialObjectStructures(CelestialObjectStructure entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject = null;
		}
		
		private void attach_CelestialObjectShips(CelestialObjectShip entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject = this;
		}
		
		private void detach_CelestialObjectShips(CelestialObjectShip entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject = null;
		}
		
		private void attach_Transits(Transit entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject = this;
		}
		
		private void detach_Transits(Transit entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject = null;
		}
		
		private void attach_Transits1(Transit entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject1 = this;
		}
		
		private void detach_Transits1(Transit entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject1 = null;
		}
		
		private void attach_Fleets(Fleet entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject = this;
		}
		
		private void detach_Fleets(Fleet entity)
		{
			this.SendPropertyChanging();
			entity.CelestialObject = null;
		}
		
		private void Initialize()
		{
			this._Battles = new EntitySet<Battle>(new Action<Battle>(this.attach_Battles), new Action<Battle>(this.detach_Battles));
			this._StarSystems = default(EntityRef<StarSystem>);
			this._CelestialObjects = new EntitySet<CelestialObject>(new Action<CelestialObject>(this.attach_CelestialObjects), new Action<CelestialObject>(this.detach_CelestialObjects));
			this._CelestialObjectEvents = new EntitySet<CelestialObjectEvent>(new Action<CelestialObjectEvent>(this.attach_CelestialObjectEvents), new Action<CelestialObjectEvent>(this.detach_CelestialObjectEvents));
			this._CelestialObjectLinks = new EntitySet<CelestialObjectLink>(new Action<CelestialObjectLink>(this.attach_CelestialObjectLinks), new Action<CelestialObjectLink>(this.detach_CelestialObjectLinks));
			this._CelestialObjectLinks1 = new EntitySet<CelestialObjectLink>(new Action<CelestialObjectLink>(this.attach_CelestialObjectLinks1), new Action<CelestialObjectLink>(this.detach_CelestialObjectLinks1));
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._CelestialObjectStructures = new EntitySet<CelestialObjectStructure>(new Action<CelestialObjectStructure>(this.attach_CelestialObjectStructures), new Action<CelestialObjectStructure>(this.detach_CelestialObjectStructures));
			this._CelestialObjectShips = new EntitySet<CelestialObjectShip>(new Action<CelestialObjectShip>(this.attach_CelestialObjectShips), new Action<CelestialObjectShip>(this.detach_CelestialObjectShips));
			this._Transits = new EntitySet<Transit>(new Action<Transit>(this.attach_Transits), new Action<Transit>(this.detach_Transits));
			this._Transits1 = new EntitySet<Transit>(new Action<Transit>(this.attach_Transits1), new Action<Transit>(this.detach_Transits1));
			this._Fleets = new EntitySet<Fleet>(new Action<Fleet>(this.attach_Fleets), new Action<Fleet>(this.detach_Fleets));
			this._CelestialObject1 = default(EntityRef<CelestialObject>);
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.CelestialObjectEvent")]
	[DataContract()]
	public partial class CelestialObjectEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ObjectID;
		
		private int _EventID;
		
		private EntityRef<CelestialObject> _CelestialObject;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectIDChanging(int value);
    partial void OnObjectIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    #endregion
		
		public CelestialObjectEvent()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ObjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					if (this._CelestialObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Association(Name="CelestialObject_CelestialObjectEvent", Storage="_CelestialObject", ThisKey="ObjectID", OtherKey="CelestialObjectID", IsForeignKey=true)]
		public CelestialObject CelestialObject
		{
			get
			{
				return this._CelestialObject.Entity;
			}
			set
			{
				CelestialObject previousValue = this._CelestialObject.Entity;
				if (((previousValue != value) 
							|| (this._CelestialObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CelestialObject.Entity = null;
						previousValue.CelestialObjectEvents.Remove(this);
					}
					this._CelestialObject.Entity = value;
					if ((value != null))
					{
						value.CelestialObjectEvents.Add(this);
						this._ObjectID = value.CelestialObjectID;
					}
					else
					{
						this._ObjectID = default(int);
					}
					this.SendPropertyChanged("CelestialObject");
				}
			}
		}
		
		[Association(Name="Event_CelestialObjectEvent", Storage="_Event", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.CelestialObjectEvents.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.CelestialObjectEvents.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._CelestialObject = default(EntityRef<CelestialObject>);
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.CelestialObjectLink")]
	[DataContract()]
	public partial class CelestialObjectLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FirstObjectID;
		
		private int _SecondObjectID;
		
		private EntityRef<CelestialObject> _CelestialObject;
		
		private EntityRef<CelestialObject> _CelestialObject1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFirstObjectIDChanging(int value);
    partial void OnFirstObjectIDChanged();
    partial void OnSecondObjectIDChanging(int value);
    partial void OnSecondObjectIDChanged();
    #endregion
		
		public CelestialObjectLink()
		{
			this.Initialize();
		}
		
		[Column(Storage="_FirstObjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int FirstObjectID
		{
			get
			{
				return this._FirstObjectID;
			}
			set
			{
				if ((this._FirstObjectID != value))
				{
					if (this._CelestialObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFirstObjectIDChanging(value);
					this.SendPropertyChanging();
					this._FirstObjectID = value;
					this.SendPropertyChanged("FirstObjectID");
					this.OnFirstObjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_SecondObjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int SecondObjectID
		{
			get
			{
				return this._SecondObjectID;
			}
			set
			{
				if ((this._SecondObjectID != value))
				{
					if (this._CelestialObject1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecondObjectIDChanging(value);
					this.SendPropertyChanging();
					this._SecondObjectID = value;
					this.SendPropertyChanged("SecondObjectID");
					this.OnSecondObjectIDChanged();
				}
			}
		}
		
		[Association(Name="CelestialObject_CelestialObjectLink", Storage="_CelestialObject", ThisKey="FirstObjectID", OtherKey="CelestialObjectID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CelestialObject CelestialObject
		{
			get
			{
				return this._CelestialObject.Entity;
			}
			set
			{
				CelestialObject previousValue = this._CelestialObject.Entity;
				if (((previousValue != value) 
							|| (this._CelestialObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CelestialObject.Entity = null;
						previousValue.CelestialObjectLinks.Remove(this);
					}
					this._CelestialObject.Entity = value;
					if ((value != null))
					{
						value.CelestialObjectLinks.Add(this);
						this._FirstObjectID = value.CelestialObjectID;
					}
					else
					{
						this._FirstObjectID = default(int);
					}
					this.SendPropertyChanged("CelestialObject");
				}
			}
		}
		
		[Association(Name="CelestialObject_CelestialObjectLink1", Storage="_CelestialObject1", ThisKey="SecondObjectID", OtherKey="CelestialObjectID", IsForeignKey=true)]
		public CelestialObject CelestialObject1
		{
			get
			{
				return this._CelestialObject1.Entity;
			}
			set
			{
				CelestialObject previousValue = this._CelestialObject1.Entity;
				if (((previousValue != value) 
							|| (this._CelestialObject1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CelestialObject1.Entity = null;
						previousValue.CelestialObjectLinks1.Remove(this);
					}
					this._CelestialObject1.Entity = value;
					if ((value != null))
					{
						value.CelestialObjectLinks1.Add(this);
						this._SecondObjectID = value.CelestialObjectID;
					}
					else
					{
						this._SecondObjectID = default(int);
					}
					this.SendPropertyChanged("CelestialObject1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._CelestialObject = default(EntityRef<CelestialObject>);
			this._CelestialObject1 = default(EntityRef<CelestialObject>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Event")]
	[DataContract()]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private string _Text;
		
		private int _EventType;
		
		private System.DateTime _Time;
		
		private int _BattleTurn;
		
		private EntitySet<BattleEvent> _BattleEvents;
		
		private EntitySet<CelestialObjectEvent> _CelestialObjectEvents;
		
		private EntitySet<PlayerEvent> _PlayerEvents;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnEventTypeChanging(int value);
    partial void OnEventTypeChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnBattleTurnChanging(int value);
    partial void OnBattleTurnChanged();
    #endregion
		
		public Event()
		{
			this.Initialize();
		}
		
		[Column(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_EventType", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="DateTime NOT NULL")]
		[DataMember(Order=4)]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_BattleTurn", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int BattleTurn
		{
			get
			{
				return this._BattleTurn;
			}
			set
			{
				if ((this._BattleTurn != value))
				{
					this.OnBattleTurnChanging(value);
					this.SendPropertyChanging();
					this._BattleTurn = value;
					this.SendPropertyChanged("BattleTurn");
					this.OnBattleTurnChanged();
				}
			}
		}
		
		[Association(Name="Event_BattleEvent", Storage="_BattleEvents", ThisKey="EventID", OtherKey="EventID")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<BattleEvent> BattleEvents
		{
			get
			{
				if ((this.serializing 
							&& (this._BattleEvents.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._BattleEvents;
			}
			set
			{
				this._BattleEvents.Assign(value);
			}
		}
		
		[Association(Name="Event_CelestialObjectEvent", Storage="_CelestialObjectEvents", ThisKey="EventID", OtherKey="EventID")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<CelestialObjectEvent> CelestialObjectEvents
		{
			get
			{
				if ((this.serializing 
							&& (this._CelestialObjectEvents.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CelestialObjectEvents;
			}
			set
			{
				this._CelestialObjectEvents.Assign(value);
			}
		}
		
		[Association(Name="Event_PlayerEvent", Storage="_PlayerEvents", ThisKey="EventID", OtherKey="EventID")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<PlayerEvent> PlayerEvents
		{
			get
			{
				if ((this.serializing 
							&& (this._PlayerEvents.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PlayerEvents;
			}
			set
			{
				this._PlayerEvents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BattleEvents(BattleEvent entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_BattleEvents(BattleEvent entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_CelestialObjectEvents(CelestialObjectEvent entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_CelestialObjectEvents(CelestialObjectEvent entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_PlayerEvents(PlayerEvent entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_PlayerEvents(PlayerEvent entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void Initialize()
		{
			this._BattleEvents = new EntitySet<BattleEvent>(new Action<BattleEvent>(this.attach_BattleEvents), new Action<BattleEvent>(this.detach_BattleEvents));
			this._CelestialObjectEvents = new EntitySet<CelestialObjectEvent>(new Action<CelestialObjectEvent>(this.attach_CelestialObjectEvents), new Action<CelestialObjectEvent>(this.detach_CelestialObjectEvents));
			this._PlayerEvents = new EntitySet<PlayerEvent>(new Action<PlayerEvent>(this.attach_PlayerEvents), new Action<PlayerEvent>(this.detach_PlayerEvents));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Player")]
	[DataContract()]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private int _SystemID;
		
		private int _SpringAccountID;
		
		private bool _IsActive;
		
		private string _MothershipName;
		
		private System.Nullable<int> _OrbitsObjectID;
		
		private System.Nullable<int> _TransitID;
		
		private double _Credits;
		
		private double _Metal;
		
		private double _Food;
		
		private double _MetalIncome;
		
		private double _FoodIncome;
		
		private int _Population;
		
		private int _PopulationCapacity;
		
		private double _Quantium;
		
		private double _QuantiumIncome;
		
		private double _DarkMatter;
		
		private double _DarkMatterIncome;
		
		private int _XP;
		
		private int _Level;
		
		private double _ResearchIncome;
		
		private double _ResearchPoints;
		
		private EntitySet<CelestialObject> _CelestialObjects;
		
		private EntitySet<PlayerEvent> _PlayerEvents;
		
		private EntitySet<MothershipStructure> _MothershipStructures;
		
		private EntitySet<PlayerTechSpent> _PlayerTechSpents;
		
		private EntitySet<PopulationTransport> _PopulationTransports;
		
		private EntityRef<StarSystem> _StarSystem;
		
		private EntityRef<SpringAccount> _SpringAccount;
		
		private EntityRef<Transit> _Transit;
		
		private EntityRef<CelestialObject> _CelestialObject;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnSystemIDChanging(int value);
    partial void OnSystemIDChanged();
    partial void OnSpringAccountIDChanging(int value);
    partial void OnSpringAccountIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnMothershipNameChanging(string value);
    partial void OnMothershipNameChanged();
    partial void OnOrbitsObjectIDChanging(System.Nullable<int> value);
    partial void OnOrbitsObjectIDChanged();
    partial void OnTransitIDChanging(System.Nullable<int> value);
    partial void OnTransitIDChanged();
    partial void OnCreditsChanging(double value);
    partial void OnCreditsChanged();
    partial void OnMetalChanging(double value);
    partial void OnMetalChanged();
    partial void OnFoodChanging(double value);
    partial void OnFoodChanged();
    partial void OnMetalIncomeChanging(double value);
    partial void OnMetalIncomeChanged();
    partial void OnFoodIncomeChanging(double value);
    partial void OnFoodIncomeChanged();
    partial void OnPopulationChanging(int value);
    partial void OnPopulationChanged();
    partial void OnPopulationCapacityChanging(int value);
    partial void OnPopulationCapacityChanged();
    partial void OnQuantiumChanging(double value);
    partial void OnQuantiumChanged();
    partial void OnQuantiumIncomeChanging(double value);
    partial void OnQuantiumIncomeChanged();
    partial void OnDarkMatterChanging(double value);
    partial void OnDarkMatterChanged();
    partial void OnDarkMatterIncomeChanging(double value);
    partial void OnDarkMatterIncomeChanged();
    partial void OnXPChanging(int value);
    partial void OnXPChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnResearchIncomeChanging(double value);
    partial void OnResearchIncomeChanged();
    partial void OnResearchPointsChanging(double value);
    partial void OnResearchPointsChanged();
    #endregion
		
		public Player()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PlayerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[Column(Storage="_SystemID", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int SystemID
		{
			get
			{
				return this._SystemID;
			}
			set
			{
				if ((this._SystemID != value))
				{
					if (this._StarSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemIDChanging(value);
					this.SendPropertyChanging();
					this._SystemID = value;
					this.SendPropertyChanged("SystemID");
					this.OnSystemIDChanged();
				}
			}
		}
		
		[Column(Storage="_SpringAccountID", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int SpringAccountID
		{
			get
			{
				return this._SpringAccountID;
			}
			set
			{
				if ((this._SpringAccountID != value))
				{
					if (this._SpringAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpringAccountIDChanging(value);
					this.SendPropertyChanging();
					this._SpringAccountID = value;
					this.SendPropertyChanged("SpringAccountID");
					this.OnSpringAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		[DataMember(Order=4)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_MothershipName", DbType="nvarchar(100) NOT NULL", CanBeNull=false)]
		[DataMember(Order=5)]
		public string MothershipName
		{
			get
			{
				return this._MothershipName;
			}
			set
			{
				if ((this._MothershipName != value))
				{
					this.OnMothershipNameChanging(value);
					this.SendPropertyChanging();
					this._MothershipName = value;
					this.SendPropertyChanged("MothershipName");
					this.OnMothershipNameChanged();
				}
			}
		}
		
		[Column(Storage="_OrbitsObjectID", DbType="int")]
		[DataMember(Order=6)]
		public System.Nullable<int> OrbitsObjectID
		{
			get
			{
				return this._OrbitsObjectID;
			}
			set
			{
				if ((this._OrbitsObjectID != value))
				{
					if (this._CelestialObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrbitsObjectIDChanging(value);
					this.SendPropertyChanging();
					this._OrbitsObjectID = value;
					this.SendPropertyChanged("OrbitsObjectID");
					this.OnOrbitsObjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_TransitID", DbType="int")]
		[DataMember(Order=7)]
		public System.Nullable<int> TransitID
		{
			get
			{
				return this._TransitID;
			}
			set
			{
				if ((this._TransitID != value))
				{
					if (this._Transit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransitIDChanging(value);
					this.SendPropertyChanging();
					this._TransitID = value;
					this.SendPropertyChanged("TransitID");
					this.OnTransitIDChanged();
				}
			}
		}
		
		[Column(Storage="_Credits", DbType="float NOT NULL")]
		[DataMember(Order=8)]
		public double Credits
		{
			get
			{
				return this._Credits;
			}
			set
			{
				if ((this._Credits != value))
				{
					this.OnCreditsChanging(value);
					this.SendPropertyChanging();
					this._Credits = value;
					this.SendPropertyChanged("Credits");
					this.OnCreditsChanged();
				}
			}
		}
		
		[Column(Storage="_Metal", DbType="float NOT NULL")]
		[DataMember(Order=9)]
		public double Metal
		{
			get
			{
				return this._Metal;
			}
			set
			{
				if ((this._Metal != value))
				{
					this.OnMetalChanging(value);
					this.SendPropertyChanging();
					this._Metal = value;
					this.SendPropertyChanged("Metal");
					this.OnMetalChanged();
				}
			}
		}
		
		[Column(Storage="_Food", DbType="float NOT NULL")]
		[DataMember(Order=10)]
		public double Food
		{
			get
			{
				return this._Food;
			}
			set
			{
				if ((this._Food != value))
				{
					this.OnFoodChanging(value);
					this.SendPropertyChanging();
					this._Food = value;
					this.SendPropertyChanged("Food");
					this.OnFoodChanged();
				}
			}
		}
		
		[Column(Storage="_MetalIncome", DbType="float NOT NULL")]
		[DataMember(Order=11)]
		public double MetalIncome
		{
			get
			{
				return this._MetalIncome;
			}
			set
			{
				if ((this._MetalIncome != value))
				{
					this.OnMetalIncomeChanging(value);
					this.SendPropertyChanging();
					this._MetalIncome = value;
					this.SendPropertyChanged("MetalIncome");
					this.OnMetalIncomeChanged();
				}
			}
		}
		
		[Column(Storage="_FoodIncome", DbType="float NOT NULL")]
		[DataMember(Order=12)]
		public double FoodIncome
		{
			get
			{
				return this._FoodIncome;
			}
			set
			{
				if ((this._FoodIncome != value))
				{
					this.OnFoodIncomeChanging(value);
					this.SendPropertyChanging();
					this._FoodIncome = value;
					this.SendPropertyChanged("FoodIncome");
					this.OnFoodIncomeChanged();
				}
			}
		}
		
		[Column(Storage="_Population", DbType="int NOT NULL")]
		[DataMember(Order=13)]
		public int Population
		{
			get
			{
				return this._Population;
			}
			set
			{
				if ((this._Population != value))
				{
					this.OnPopulationChanging(value);
					this.SendPropertyChanging();
					this._Population = value;
					this.SendPropertyChanged("Population");
					this.OnPopulationChanged();
				}
			}
		}
		
		[Column(Storage="_PopulationCapacity", DbType="int NOT NULL")]
		[DataMember(Order=14)]
		public int PopulationCapacity
		{
			get
			{
				return this._PopulationCapacity;
			}
			set
			{
				if ((this._PopulationCapacity != value))
				{
					this.OnPopulationCapacityChanging(value);
					this.SendPropertyChanging();
					this._PopulationCapacity = value;
					this.SendPropertyChanged("PopulationCapacity");
					this.OnPopulationCapacityChanged();
				}
			}
		}
		
		[Column(Storage="_Quantium", DbType="float NOT NULL")]
		[DataMember(Order=15)]
		public double Quantium
		{
			get
			{
				return this._Quantium;
			}
			set
			{
				if ((this._Quantium != value))
				{
					this.OnQuantiumChanging(value);
					this.SendPropertyChanging();
					this._Quantium = value;
					this.SendPropertyChanged("Quantium");
					this.OnQuantiumChanged();
				}
			}
		}
		
		[Column(Storage="_QuantiumIncome", DbType="float NOT NULL")]
		[DataMember(Order=16)]
		public double QuantiumIncome
		{
			get
			{
				return this._QuantiumIncome;
			}
			set
			{
				if ((this._QuantiumIncome != value))
				{
					this.OnQuantiumIncomeChanging(value);
					this.SendPropertyChanging();
					this._QuantiumIncome = value;
					this.SendPropertyChanged("QuantiumIncome");
					this.OnQuantiumIncomeChanged();
				}
			}
		}
		
		[Column(Storage="_DarkMatter", DbType="float NOT NULL")]
		[DataMember(Order=17)]
		public double DarkMatter
		{
			get
			{
				return this._DarkMatter;
			}
			set
			{
				if ((this._DarkMatter != value))
				{
					this.OnDarkMatterChanging(value);
					this.SendPropertyChanging();
					this._DarkMatter = value;
					this.SendPropertyChanged("DarkMatter");
					this.OnDarkMatterChanged();
				}
			}
		}
		
		[Column(Storage="_DarkMatterIncome", DbType="float NOT NULL")]
		[DataMember(Order=18)]
		public double DarkMatterIncome
		{
			get
			{
				return this._DarkMatterIncome;
			}
			set
			{
				if ((this._DarkMatterIncome != value))
				{
					this.OnDarkMatterIncomeChanging(value);
					this.SendPropertyChanging();
					this._DarkMatterIncome = value;
					this.SendPropertyChanged("DarkMatterIncome");
					this.OnDarkMatterIncomeChanged();
				}
			}
		}
		
		[Column(Storage="_XP", DbType="int NOT NULL")]
		[DataMember(Order=19)]
		public int XP
		{
			get
			{
				return this._XP;
			}
			set
			{
				if ((this._XP != value))
				{
					this.OnXPChanging(value);
					this.SendPropertyChanging();
					this._XP = value;
					this.SendPropertyChanged("XP");
					this.OnXPChanged();
				}
			}
		}
		
		[Column(Name="[Level]", Storage="_Level", DbType="int NOT NULL")]
		[DataMember(Order=20)]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[Column(Storage="_ResearchIncome", DbType="float NOT NULL")]
		[DataMember(Order=21)]
		public double ResearchIncome
		{
			get
			{
				return this._ResearchIncome;
			}
			set
			{
				if ((this._ResearchIncome != value))
				{
					this.OnResearchIncomeChanging(value);
					this.SendPropertyChanging();
					this._ResearchIncome = value;
					this.SendPropertyChanged("ResearchIncome");
					this.OnResearchIncomeChanged();
				}
			}
		}
		
		[Column(Storage="_ResearchPoints", DbType="float NOT NULL")]
		[DataMember(Order=22)]
		public double ResearchPoints
		{
			get
			{
				return this._ResearchPoints;
			}
			set
			{
				if ((this._ResearchPoints != value))
				{
					this.OnResearchPointsChanging(value);
					this.SendPropertyChanging();
					this._ResearchPoints = value;
					this.SendPropertyChanged("ResearchPoints");
					this.OnResearchPointsChanged();
				}
			}
		}
		
		[Association(Name="Player_CelestialObject", Storage="_CelestialObjects", ThisKey="PlayerID", OtherKey="OwnerID")]
		[DataMember(Order=23, EmitDefaultValue=false)]
		public EntitySet<CelestialObject> CelestialObjects
		{
			get
			{
				if ((this.serializing 
							&& (this._CelestialObjects.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CelestialObjects;
			}
			set
			{
				this._CelestialObjects.Assign(value);
			}
		}
		
		[Association(Name="Player_PlayerEvent", Storage="_PlayerEvents", ThisKey="PlayerID", OtherKey="PlayerID")]
		[DataMember(Order=24, EmitDefaultValue=false)]
		public EntitySet<PlayerEvent> PlayerEvents
		{
			get
			{
				if ((this.serializing 
							&& (this._PlayerEvents.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PlayerEvents;
			}
			set
			{
				this._PlayerEvents.Assign(value);
			}
		}
		
		[Association(Name="Player_MothershipStructure", Storage="_MothershipStructures", ThisKey="PlayerID", OtherKey="PlayerID")]
		[DataMember(Order=25, EmitDefaultValue=false)]
		public EntitySet<MothershipStructure> MothershipStructures
		{
			get
			{
				if ((this.serializing 
							&& (this._MothershipStructures.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._MothershipStructures;
			}
			set
			{
				this._MothershipStructures.Assign(value);
			}
		}
		
		[Association(Name="Player_PlayerTechSpent", Storage="_PlayerTechSpents", ThisKey="PlayerID", OtherKey="PlayerID")]
		[DataMember(Order=26, EmitDefaultValue=false)]
		public EntitySet<PlayerTechSpent> PlayerTechSpents
		{
			get
			{
				if ((this.serializing 
							&& (this._PlayerTechSpents.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PlayerTechSpents;
			}
			set
			{
				this._PlayerTechSpents.Assign(value);
			}
		}
		
		[Association(Name="Player_PopulationTransport", Storage="_PopulationTransports", ThisKey="PlayerID", OtherKey="OwnerID")]
		[DataMember(Order=27, EmitDefaultValue=false)]
		public EntitySet<PopulationTransport> PopulationTransports
		{
			get
			{
				if ((this.serializing 
							&& (this._PopulationTransports.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PopulationTransports;
			}
			set
			{
				this._PopulationTransports.Assign(value);
			}
		}
		
		[Association(Name="StarSystem_Player", Storage="_StarSystem", ThisKey="SystemID", OtherKey="SystemID", IsForeignKey=true)]
		public StarSystem StarSystem
		{
			get
			{
				return this._StarSystem.Entity;
			}
			set
			{
				StarSystem previousValue = this._StarSystem.Entity;
				if (((previousValue != value) 
							|| (this._StarSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StarSystem.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._StarSystem.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._SystemID = value.SystemID;
					}
					else
					{
						this._SystemID = default(int);
					}
					this.SendPropertyChanged("StarSystem");
				}
			}
		}
		
		[Association(Name="SpringAccount_Player", Storage="_SpringAccount", ThisKey="SpringAccountID", OtherKey="SpringAccountID", IsForeignKey=true)]
		public SpringAccount SpringAccount
		{
			get
			{
				return this._SpringAccount.Entity;
			}
			set
			{
				SpringAccount previousValue = this._SpringAccount.Entity;
				if (((previousValue != value) 
							|| (this._SpringAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpringAccount.Entity = null;
						previousValue.Players = null;
					}
					this._SpringAccount.Entity = value;
					if ((value != null))
					{
						value.Players = this;
						this._SpringAccountID = value.SpringAccountID;
					}
					else
					{
						this._SpringAccountID = default(int);
					}
					this.SendPropertyChanged("SpringAccount");
				}
			}
		}
		
		[Association(Name="Transit_Player", Storage="_Transit", ThisKey="TransitID", OtherKey="TransitID", IsForeignKey=true)]
		public Transit Transit
		{
			get
			{
				return this._Transit.Entity;
			}
			set
			{
				Transit previousValue = this._Transit.Entity;
				if (((previousValue != value) 
							|| (this._Transit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transit.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Transit.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._TransitID = value.TransitID;
					}
					else
					{
						this._TransitID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Transit");
				}
			}
		}
		
		[Association(Name="CelestialObject_Player", Storage="_CelestialObject", ThisKey="OrbitsObjectID", OtherKey="CelestialObjectID", IsForeignKey=true)]
		public CelestialObject CelestialObject
		{
			get
			{
				return this._CelestialObject.Entity;
			}
			set
			{
				CelestialObject previousValue = this._CelestialObject.Entity;
				if (((previousValue != value) 
							|| (this._CelestialObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CelestialObject.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._CelestialObject.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._OrbitsObjectID = value.CelestialObjectID;
					}
					else
					{
						this._OrbitsObjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CelestialObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CelestialObjects(CelestialObject entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_CelestialObjects(CelestialObject entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_PlayerEvents(PlayerEvent entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_PlayerEvents(PlayerEvent entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_MothershipStructures(MothershipStructure entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_MothershipStructures(MothershipStructure entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_PlayerTechSpents(PlayerTechSpent entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_PlayerTechSpents(PlayerTechSpent entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_PopulationTransports(PopulationTransport entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_PopulationTransports(PopulationTransport entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void Initialize()
		{
			this._CelestialObjects = new EntitySet<CelestialObject>(new Action<CelestialObject>(this.attach_CelestialObjects), new Action<CelestialObject>(this.detach_CelestialObjects));
			this._PlayerEvents = new EntitySet<PlayerEvent>(new Action<PlayerEvent>(this.attach_PlayerEvents), new Action<PlayerEvent>(this.detach_PlayerEvents));
			this._MothershipStructures = new EntitySet<MothershipStructure>(new Action<MothershipStructure>(this.attach_MothershipStructures), new Action<MothershipStructure>(this.detach_MothershipStructures));
			this._PlayerTechSpents = new EntitySet<PlayerTechSpent>(new Action<PlayerTechSpent>(this.attach_PlayerTechSpents), new Action<PlayerTechSpent>(this.detach_PlayerTechSpents));
			this._PopulationTransports = new EntitySet<PopulationTransport>(new Action<PopulationTransport>(this.attach_PopulationTransports), new Action<PopulationTransport>(this.detach_PopulationTransports));
			this._StarSystem = default(EntityRef<StarSystem>);
			this._SpringAccount = default(EntityRef<SpringAccount>);
			this._Transit = default(EntityRef<Transit>);
			this._CelestialObject = default(EntityRef<CelestialObject>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.PlayerEvent")]
	[DataContract()]
	public partial class PlayerEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private int _EventID;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    #endregion
		
		public PlayerEvent()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PlayerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Association(Name="Event_PlayerEvent", Storage="_Event", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.PlayerEvents.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.PlayerEvents.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[Association(Name="Player_PlayerEvent", Storage="_Player", ThisKey="PlayerID", OtherKey="PlayerID", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.PlayerEvents.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.PlayerEvents.Add(this);
						this._PlayerID = value.PlayerID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Event = default(EntityRef<Event>);
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.SpringAccount")]
	[DataContract()]
	public partial class SpringAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpringAccountID;
		
		private string _Name;
		
		private string _Flags;
		
		private int _UserCookie;
		
		private System.Nullable<System.DateTime> _LastLogin;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _LastIP;
		
		private string _LastCountry;
		
		private string _Password;
		
		private EntityRef<Player> _Players;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpringAccountIDChanging(int value);
    partial void OnSpringAccountIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFlagsChanging(string value);
    partial void OnFlagsChanged();
    partial void OnUserCookieChanging(int value);
    partial void OnUserCookieChanged();
    partial void OnLastLoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnLastIPChanging(string value);
    partial void OnLastIPChanged();
    partial void OnLastCountryChanging(string value);
    partial void OnLastCountryChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public SpringAccount()
		{
			this.Initialize();
		}
		
		[Column(Storage="_SpringAccountID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int SpringAccountID
		{
			get
			{
				return this._SpringAccountID;
			}
			set
			{
				if ((this._SpringAccountID != value))
				{
					this.OnSpringAccountIDChanging(value);
					this.SendPropertyChanging();
					this._SpringAccountID = value;
					this.SendPropertyChanged("SpringAccountID");
					this.OnSpringAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Flags", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Flags
		{
			get
			{
				return this._Flags;
			}
			set
			{
				if ((this._Flags != value))
				{
					this.OnFlagsChanging(value);
					this.SendPropertyChanging();
					this._Flags = value;
					this.SendPropertyChanged("Flags");
					this.OnFlagsChanged();
				}
			}
		}
		
		[Column(Storage="_UserCookie", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int UserCookie
		{
			get
			{
				return this._UserCookie;
			}
			set
			{
				if ((this._UserCookie != value))
				{
					this.OnUserCookieChanging(value);
					this.SendPropertyChanging();
					this._UserCookie = value;
					this.SendPropertyChanged("UserCookie");
					this.OnUserCookieChanged();
				}
			}
		}
		
		[Column(Storage="_LastLogin", DbType="DateTime")]
		[DataMember(Order=5)]
		public System.Nullable<System.DateTime> LastLogin
		{
			get
			{
				return this._LastLogin;
			}
			set
			{
				if ((this._LastLogin != value))
				{
					this.OnLastLoginChanging(value);
					this.SendPropertyChanging();
					this._LastLogin = value;
					this.SendPropertyChanged("LastLogin");
					this.OnLastLoginChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		[DataMember(Order=6)]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_LastIP", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		[DataMember(Order=7)]
		public string LastIP
		{
			get
			{
				return this._LastIP;
			}
			set
			{
				if ((this._LastIP != value))
				{
					this.OnLastIPChanging(value);
					this.SendPropertyChanging();
					this._LastIP = value;
					this.SendPropertyChanged("LastIP");
					this.OnLastIPChanged();
				}
			}
		}
		
		[Column(Storage="_LastCountry", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		[DataMember(Order=8)]
		public string LastCountry
		{
			get
			{
				return this._LastCountry;
			}
			set
			{
				if ((this._LastCountry != value))
				{
					this.OnLastCountryChanging(value);
					this.SendPropertyChanging();
					this._LastCountry = value;
					this.SendPropertyChanged("LastCountry");
					this.OnLastCountryChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		[DataMember(Order=9)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Association(Name="SpringAccount_Player", Storage="_Players", ThisKey="SpringAccountID", OtherKey="SpringAccountID", IsUnique=true, IsForeignKey=false)]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public Player Players
		{
			get
			{
				if ((this.serializing 
							&& (this._Players.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._Players.Entity;
			}
			set
			{
				Player previousValue = this._Players.Entity;
				if (((previousValue != value) 
							|| (this._Players.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Players.Entity = null;
						previousValue.SpringAccount = null;
					}
					this._Players.Entity = value;
					if ((value != null))
					{
						value.SpringAccount = this;
					}
					this.SendPropertyChanged("Players");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Players = default(EntityRef<Player>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Config")]
	[DataContract()]
	public partial class Config : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _Started;
		
		private int _CombatTurn;
		
		private System.Nullable<System.DateTime> _StartOn;
		
		private int _GameID;
		
		private int _SecondsPerTurn;
		
		private int _ResourceTick;
		
		private int _PopulationTick;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStartedChanging(System.Nullable<System.DateTime> value);
    partial void OnStartedChanged();
    partial void OnCombatTurnChanging(int value);
    partial void OnCombatTurnChanged();
    partial void OnStartOnChanging(System.Nullable<System.DateTime> value);
    partial void OnStartOnChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnSecondsPerTurnChanging(int value);
    partial void OnSecondsPerTurnChanged();
    partial void OnResourceTickChanging(int value);
    partial void OnResourceTickChanged();
    partial void OnPopulationTickChanging(int value);
    partial void OnPopulationTickChanged();
    #endregion
		
		public Config()
		{
			this.Initialize();
		}
		
		[Column(Storage="_Started", DbType="DateTime")]
		[DataMember(Order=1)]
		public System.Nullable<System.DateTime> Started
		{
			get
			{
				return this._Started;
			}
			set
			{
				if ((this._Started != value))
				{
					this.OnStartedChanging(value);
					this.SendPropertyChanging();
					this._Started = value;
					this.SendPropertyChanged("Started");
					this.OnStartedChanged();
				}
			}
		}
		
		[Column(Storage="_CombatTurn", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int CombatTurn
		{
			get
			{
				return this._CombatTurn;
			}
			set
			{
				if ((this._CombatTurn != value))
				{
					this.OnCombatTurnChanging(value);
					this.SendPropertyChanging();
					this._CombatTurn = value;
					this.SendPropertyChanged("CombatTurn");
					this.OnCombatTurnChanged();
				}
			}
		}
		
		[Column(Storage="_StartOn", DbType="DateTime")]
		[DataMember(Order=3)]
		public System.Nullable<System.DateTime> StartOn
		{
			get
			{
				return this._StartOn;
			}
			set
			{
				if ((this._StartOn != value))
				{
					this.OnStartOnChanging(value);
					this.SendPropertyChanging();
					this._StartOn = value;
					this.SendPropertyChanged("StartOn");
					this.OnStartOnChanged();
				}
			}
		}
		
		[Column(Storage="_GameID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=4)]
		public int GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[Column(Storage="_SecondsPerTurn", DbType="int NOT NULL")]
		[DataMember(Order=5)]
		public int SecondsPerTurn
		{
			get
			{
				return this._SecondsPerTurn;
			}
			set
			{
				if ((this._SecondsPerTurn != value))
				{
					this.OnSecondsPerTurnChanging(value);
					this.SendPropertyChanging();
					this._SecondsPerTurn = value;
					this.SendPropertyChanged("SecondsPerTurn");
					this.OnSecondsPerTurnChanged();
				}
			}
		}
		
		[Column(Storage="_ResourceTick", DbType="int NOT NULL")]
		[DataMember(Order=6)]
		public int ResourceTick
		{
			get
			{
				return this._ResourceTick;
			}
			set
			{
				if ((this._ResourceTick != value))
				{
					this.OnResourceTickChanging(value);
					this.SendPropertyChanging();
					this._ResourceTick = value;
					this.SendPropertyChanged("ResourceTick");
					this.OnResourceTickChanged();
				}
			}
		}
		
		[Column(Storage="_PopulationTick", DbType="int NOT NULL")]
		[DataMember(Order=7)]
		public int PopulationTick
		{
			get
			{
				return this._PopulationTick;
			}
			set
			{
				if ((this._PopulationTick != value))
				{
					this.OnPopulationTickChanging(value);
					this.SendPropertyChanging();
					this._PopulationTick = value;
					this.SendPropertyChanged("PopulationTick");
					this.OnPopulationTickChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.CelestialObjectStructure")]
	[DataContract()]
	public partial class CelestialObjectStructure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CelestialObjectID;
		
		private int _StructureTypeID;
		
		private int _Count;
		
		private EntityRef<CelestialObject> _CelestialObject;
		
		private EntityRef<StructureType> _StructureType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCelestialObjectIDChanging(int value);
    partial void OnCelestialObjectIDChanged();
    partial void OnStructureTypeIDChanging(int value);
    partial void OnStructureTypeIDChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    #endregion
		
		public CelestialObjectStructure()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CelestialObjectID", DbType="int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int CelestialObjectID
		{
			get
			{
				return this._CelestialObjectID;
			}
			set
			{
				if ((this._CelestialObjectID != value))
				{
					if (this._CelestialObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCelestialObjectIDChanging(value);
					this.SendPropertyChanging();
					this._CelestialObjectID = value;
					this.SendPropertyChanged("CelestialObjectID");
					this.OnCelestialObjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_StructureTypeID", DbType="int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int StructureTypeID
		{
			get
			{
				return this._StructureTypeID;
			}
			set
			{
				if ((this._StructureTypeID != value))
				{
					if (this._StructureType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStructureTypeIDChanging(value);
					this.SendPropertyChanging();
					this._StructureTypeID = value;
					this.SendPropertyChanged("StructureTypeID");
					this.OnStructureTypeIDChanged();
				}
			}
		}
		
		[Column(Name="[Count]", Storage="_Count", DbType="int NOT NULL")]
		[DataMember(Order=3)]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Association(Name="CelestialObject_CelestialObjectStructure", Storage="_CelestialObject", ThisKey="CelestialObjectID", OtherKey="CelestialObjectID", IsForeignKey=true)]
		public CelestialObject CelestialObject
		{
			get
			{
				return this._CelestialObject.Entity;
			}
			set
			{
				CelestialObject previousValue = this._CelestialObject.Entity;
				if (((previousValue != value) 
							|| (this._CelestialObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CelestialObject.Entity = null;
						previousValue.CelestialObjectStructures.Remove(this);
					}
					this._CelestialObject.Entity = value;
					if ((value != null))
					{
						value.CelestialObjectStructures.Add(this);
						this._CelestialObjectID = value.CelestialObjectID;
					}
					else
					{
						this._CelestialObjectID = default(int);
					}
					this.SendPropertyChanged("CelestialObject");
				}
			}
		}
		
		[Association(Name="StructureType_CelestialObjectStructure", Storage="_StructureType", ThisKey="StructureTypeID", OtherKey="StructureTypeID", IsForeignKey=true)]
		public StructureType StructureType
		{
			get
			{
				return this._StructureType.Entity;
			}
			set
			{
				StructureType previousValue = this._StructureType.Entity;
				if (((previousValue != value) 
							|| (this._StructureType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StructureType.Entity = null;
						previousValue.CelestialObjectStructures.Remove(this);
					}
					this._StructureType.Entity = value;
					if ((value != null))
					{
						value.CelestialObjectStructures.Add(this);
						this._StructureTypeID = value.StructureTypeID;
					}
					else
					{
						this._StructureTypeID = default(int);
					}
					this.SendPropertyChanged("StructureType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._CelestialObject = default(EntityRef<CelestialObject>);
			this._StructureType = default(EntityRef<StructureType>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.MothershipStructure")]
	[DataContract()]
	public partial class MothershipStructure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private int _StructureTypeID;
		
		private int _Count;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<StructureType> _StructureType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnStructureTypeIDChanging(int value);
    partial void OnStructureTypeIDChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    #endregion
		
		public MothershipStructure()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PlayerID", DbType="int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[Column(Storage="_StructureTypeID", DbType="int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int StructureTypeID
		{
			get
			{
				return this._StructureTypeID;
			}
			set
			{
				if ((this._StructureTypeID != value))
				{
					if (this._StructureType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStructureTypeIDChanging(value);
					this.SendPropertyChanging();
					this._StructureTypeID = value;
					this.SendPropertyChanged("StructureTypeID");
					this.OnStructureTypeIDChanged();
				}
			}
		}
		
		[Column(Name="[Count]", Storage="_Count", DbType="int NOT NULL")]
		[DataMember(Order=3)]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Association(Name="Player_MothershipStructure", Storage="_Player", ThisKey="PlayerID", OtherKey="PlayerID", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.MothershipStructures.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.MothershipStructures.Add(this);
						this._PlayerID = value.PlayerID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[Association(Name="StructureType_MothershipStructure", Storage="_StructureType", ThisKey="StructureTypeID", OtherKey="StructureTypeID", IsForeignKey=true)]
		public StructureType StructureType
		{
			get
			{
				return this._StructureType.Entity;
			}
			set
			{
				StructureType previousValue = this._StructureType.Entity;
				if (((previousValue != value) 
							|| (this._StructureType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StructureType.Entity = null;
						previousValue.MothershipStructures.Remove(this);
					}
					this._StructureType.Entity = value;
					if ((value != null))
					{
						value.MothershipStructures.Add(this);
						this._StructureTypeID = value.StructureTypeID;
					}
					else
					{
						this._StructureTypeID = default(int);
					}
					this.SendPropertyChanged("StructureType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Player = default(EntityRef<Player>);
			this._StructureType = default(EntityRef<StructureType>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.StarSystemTech")]
	[DataContract()]
	public partial class StarSystemTech : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StarSystemID;
		
		private int _TechID;
		
		private EntityRef<StarSystem> _StarSystem;
		
		private EntityRef<Tech> _Tech;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStarSystemIDChanging(int value);
    partial void OnStarSystemIDChanged();
    partial void OnTechIDChanging(int value);
    partial void OnTechIDChanged();
    #endregion
		
		public StarSystemTech()
		{
			this.Initialize();
		}
		
		[Column(Storage="_StarSystemID", DbType="int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int StarSystemID
		{
			get
			{
				return this._StarSystemID;
			}
			set
			{
				if ((this._StarSystemID != value))
				{
					if (this._StarSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStarSystemIDChanging(value);
					this.SendPropertyChanging();
					this._StarSystemID = value;
					this.SendPropertyChanged("StarSystemID");
					this.OnStarSystemIDChanged();
				}
			}
		}
		
		[Column(Storage="_TechID", DbType="int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int TechID
		{
			get
			{
				return this._TechID;
			}
			set
			{
				if ((this._TechID != value))
				{
					if (this._Tech.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechIDChanging(value);
					this.SendPropertyChanging();
					this._TechID = value;
					this.SendPropertyChanged("TechID");
					this.OnTechIDChanged();
				}
			}
		}
		
		[Association(Name="StarSystem_StarSystemTech", Storage="_StarSystem", ThisKey="StarSystemID", OtherKey="SystemID", IsForeignKey=true)]
		public StarSystem StarSystem
		{
			get
			{
				return this._StarSystem.Entity;
			}
			set
			{
				StarSystem previousValue = this._StarSystem.Entity;
				if (((previousValue != value) 
							|| (this._StarSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StarSystem.Entity = null;
						previousValue.StarSystemTeches.Remove(this);
					}
					this._StarSystem.Entity = value;
					if ((value != null))
					{
						value.StarSystemTeches.Add(this);
						this._StarSystemID = value.SystemID;
					}
					else
					{
						this._StarSystemID = default(int);
					}
					this.SendPropertyChanged("StarSystem");
				}
			}
		}
		
		[Association(Name="Tech_StarSystemTech", Storage="_Tech", ThisKey="TechID", OtherKey="TechID", IsForeignKey=true)]
		public Tech Tech
		{
			get
			{
				return this._Tech.Entity;
			}
			set
			{
				Tech previousValue = this._Tech.Entity;
				if (((previousValue != value) 
							|| (this._Tech.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tech.Entity = null;
						previousValue.StarSystemTeches.Remove(this);
					}
					this._Tech.Entity = value;
					if ((value != null))
					{
						value.StarSystemTeches.Add(this);
						this._TechID = value.TechID;
					}
					else
					{
						this._TechID = default(int);
					}
					this.SendPropertyChanged("Tech");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._StarSystem = default(EntityRef<StarSystem>);
			this._Tech = default(EntityRef<Tech>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.PlayerTechSpent")]
	[DataContract()]
	public partial class PlayerTechSpent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private int _TechID;
		
		private int _SpentResearch;
		
		private int _SpentQuantium;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Tech> _Tech;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnTechIDChanging(int value);
    partial void OnTechIDChanged();
    partial void OnSpentResearchChanging(int value);
    partial void OnSpentResearchChanged();
    partial void OnSpentQuantiumChanging(int value);
    partial void OnSpentQuantiumChanged();
    #endregion
		
		public PlayerTechSpent()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PlayerID", DbType="int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[Column(Storage="_TechID", DbType="int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int TechID
		{
			get
			{
				return this._TechID;
			}
			set
			{
				if ((this._TechID != value))
				{
					if (this._Tech.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechIDChanging(value);
					this.SendPropertyChanging();
					this._TechID = value;
					this.SendPropertyChanged("TechID");
					this.OnTechIDChanged();
				}
			}
		}
		
		[Column(Storage="_SpentResearch", DbType="int NOT NULL")]
		[DataMember(Order=3)]
		public int SpentResearch
		{
			get
			{
				return this._SpentResearch;
			}
			set
			{
				if ((this._SpentResearch != value))
				{
					this.OnSpentResearchChanging(value);
					this.SendPropertyChanging();
					this._SpentResearch = value;
					this.SendPropertyChanged("SpentResearch");
					this.OnSpentResearchChanged();
				}
			}
		}
		
		[Column(Storage="_SpentQuantium", DbType="int NOT NULL")]
		[DataMember(Order=4)]
		public int SpentQuantium
		{
			get
			{
				return this._SpentQuantium;
			}
			set
			{
				if ((this._SpentQuantium != value))
				{
					this.OnSpentQuantiumChanging(value);
					this.SendPropertyChanging();
					this._SpentQuantium = value;
					this.SendPropertyChanged("SpentQuantium");
					this.OnSpentQuantiumChanged();
				}
			}
		}
		
		[Association(Name="Player_PlayerTechSpent", Storage="_Player", ThisKey="PlayerID", OtherKey="PlayerID", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.PlayerTechSpents.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.PlayerTechSpents.Add(this);
						this._PlayerID = value.PlayerID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[Association(Name="Tech_PlayerTechSpent", Storage="_Tech", ThisKey="TechID", OtherKey="TechID", IsForeignKey=true)]
		public Tech Tech
		{
			get
			{
				return this._Tech.Entity;
			}
			set
			{
				Tech previousValue = this._Tech.Entity;
				if (((previousValue != value) 
							|| (this._Tech.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tech.Entity = null;
						previousValue.PlayerTechSpents.Remove(this);
					}
					this._Tech.Entity = value;
					if ((value != null))
					{
						value.PlayerTechSpents.Add(this);
						this._TechID = value.TechID;
					}
					else
					{
						this._TechID = default(int);
					}
					this.SendPropertyChanged("Tech");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Player = default(EntityRef<Player>);
			this._Tech = default(EntityRef<Tech>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.FleetShip")]
	[DataContract()]
	public partial class FleetShip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FleetID;
		
		private int _ShipTypeID;
		
		private int _Count;
		
		private EntityRef<Fleet> _Fleet;
		
		private EntityRef<ShipType> _ShipType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFleetIDChanging(int value);
    partial void OnFleetIDChanged();
    partial void OnShipTypeIDChanging(int value);
    partial void OnShipTypeIDChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    #endregion
		
		public FleetShip()
		{
			this.Initialize();
		}
		
		[Column(Storage="_FleetID", DbType="int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int FleetID
		{
			get
			{
				return this._FleetID;
			}
			set
			{
				if ((this._FleetID != value))
				{
					if (this._Fleet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFleetIDChanging(value);
					this.SendPropertyChanging();
					this._FleetID = value;
					this.SendPropertyChanged("FleetID");
					this.OnFleetIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShipTypeID", DbType="int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int ShipTypeID
		{
			get
			{
				return this._ShipTypeID;
			}
			set
			{
				if ((this._ShipTypeID != value))
				{
					if (this._ShipType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShipTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ShipTypeID = value;
					this.SendPropertyChanged("ShipTypeID");
					this.OnShipTypeIDChanged();
				}
			}
		}
		
		[Column(Name="[Count]", Storage="_Count", DbType="int NOT NULL")]
		[DataMember(Order=3)]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Association(Name="Fleet_FleetShip", Storage="_Fleet", ThisKey="FleetID", OtherKey="FleetID", IsForeignKey=true)]
		public Fleet Fleet
		{
			get
			{
				return this._Fleet.Entity;
			}
			set
			{
				Fleet previousValue = this._Fleet.Entity;
				if (((previousValue != value) 
							|| (this._Fleet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fleet.Entity = null;
						previousValue.FleetShips.Remove(this);
					}
					this._Fleet.Entity = value;
					if ((value != null))
					{
						value.FleetShips.Add(this);
						this._FleetID = value.FleetID;
					}
					else
					{
						this._FleetID = default(int);
					}
					this.SendPropertyChanged("Fleet");
				}
			}
		}
		
		[Association(Name="ShipType_FleetShip", Storage="_ShipType", ThisKey="ShipTypeID", OtherKey="ShipTypeID", IsForeignKey=true)]
		public ShipType ShipType
		{
			get
			{
				return this._ShipType.Entity;
			}
			set
			{
				ShipType previousValue = this._ShipType.Entity;
				if (((previousValue != value) 
							|| (this._ShipType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShipType.Entity = null;
						previousValue.FleetShips.Remove(this);
					}
					this._ShipType.Entity = value;
					if ((value != null))
					{
						value.FleetShips.Add(this);
						this._ShipTypeID = value.ShipTypeID;
					}
					else
					{
						this._ShipTypeID = default(int);
					}
					this.SendPropertyChanged("ShipType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Fleet = default(EntityRef<Fleet>);
			this._ShipType = default(EntityRef<ShipType>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.CelestialObjectShip")]
	[DataContract()]
	public partial class CelestialObjectShip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CelestialObjectID;
		
		private int _ShipTypeID;
		
		private int _Count;
		
		private EntityRef<CelestialObject> _CelestialObject;
		
		private EntityRef<ShipType> _ShipType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCelestialObjectIDChanging(int value);
    partial void OnCelestialObjectIDChanged();
    partial void OnShipTypeIDChanging(int value);
    partial void OnShipTypeIDChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    #endregion
		
		public CelestialObjectShip()
		{
			this.Initialize();
		}
		
		[Column(Storage="_CelestialObjectID", DbType="int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int CelestialObjectID
		{
			get
			{
				return this._CelestialObjectID;
			}
			set
			{
				if ((this._CelestialObjectID != value))
				{
					if (this._CelestialObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCelestialObjectIDChanging(value);
					this.SendPropertyChanging();
					this._CelestialObjectID = value;
					this.SendPropertyChanged("CelestialObjectID");
					this.OnCelestialObjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShipTypeID", DbType="int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public int ShipTypeID
		{
			get
			{
				return this._ShipTypeID;
			}
			set
			{
				if ((this._ShipTypeID != value))
				{
					if (this._ShipType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShipTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ShipTypeID = value;
					this.SendPropertyChanged("ShipTypeID");
					this.OnShipTypeIDChanged();
				}
			}
		}
		
		[Column(Name="[Count]", Storage="_Count", DbType="int NOT NULL")]
		[DataMember(Order=3)]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Association(Name="CelestialObject_CelestialObjectShip", Storage="_CelestialObject", ThisKey="CelestialObjectID", OtherKey="CelestialObjectID", IsForeignKey=true)]
		public CelestialObject CelestialObject
		{
			get
			{
				return this._CelestialObject.Entity;
			}
			set
			{
				CelestialObject previousValue = this._CelestialObject.Entity;
				if (((previousValue != value) 
							|| (this._CelestialObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CelestialObject.Entity = null;
						previousValue.CelestialObjectShips.Remove(this);
					}
					this._CelestialObject.Entity = value;
					if ((value != null))
					{
						value.CelestialObjectShips.Add(this);
						this._CelestialObjectID = value.CelestialObjectID;
					}
					else
					{
						this._CelestialObjectID = default(int);
					}
					this.SendPropertyChanged("CelestialObject");
				}
			}
		}
		
		[Association(Name="ShipType_CelestialObjectShip", Storage="_ShipType", ThisKey="ShipTypeID", OtherKey="ShipTypeID", IsForeignKey=true)]
		public ShipType ShipType
		{
			get
			{
				return this._ShipType.Entity;
			}
			set
			{
				ShipType previousValue = this._ShipType.Entity;
				if (((previousValue != value) 
							|| (this._ShipType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShipType.Entity = null;
						previousValue.CelestialObjectShips.Remove(this);
					}
					this._ShipType.Entity = value;
					if ((value != null))
					{
						value.CelestialObjectShips.Add(this);
						this._ShipTypeID = value.ShipTypeID;
					}
					else
					{
						this._ShipTypeID = default(int);
					}
					this.SendPropertyChanged("ShipType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._CelestialObject = default(EntityRef<CelestialObject>);
			this._ShipType = default(EntityRef<ShipType>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Transit")]
	[DataContract()]
	public partial class Transit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransitID;
		
		private float _X;
		
		private float _Y;
		
		private System.Nullable<int> _FromObjectID;
		
		private int _ToObjectID;
		
		private float _FromX;
		
		private float _FromY;
		
		private float _ToX;
		
		private float _ToY;
		
		private int _StartBattleTurn;
		
		private int _EndBattleTurn;
		
		private int _Warp;
		
		private EntitySet<Player> _Players;
		
		private EntitySet<Fleet> _Fleets;
		
		private EntitySet<PopulationTransport> _PopulationTransports;
		
		private EntityRef<CelestialObject> _CelestialObject;
		
		private EntityRef<CelestialObject> _CelestialObject1;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransitIDChanging(int value);
    partial void OnTransitIDChanged();
    partial void OnXChanging(float value);
    partial void OnXChanged();
    partial void OnYChanging(float value);
    partial void OnYChanged();
    partial void OnFromObjectIDChanging(System.Nullable<int> value);
    partial void OnFromObjectIDChanged();
    partial void OnToObjectIDChanging(int value);
    partial void OnToObjectIDChanged();
    partial void OnFromXChanging(float value);
    partial void OnFromXChanged();
    partial void OnFromYChanging(float value);
    partial void OnFromYChanged();
    partial void OnToXChanging(float value);
    partial void OnToXChanged();
    partial void OnToYChanging(float value);
    partial void OnToYChanged();
    partial void OnStartBattleTurnChanging(int value);
    partial void OnStartBattleTurnChanged();
    partial void OnEndBattleTurnChanging(int value);
    partial void OnEndBattleTurnChanged();
    partial void OnWarpChanging(int value);
    partial void OnWarpChanged();
    #endregion
		
		public Transit()
		{
			this.Initialize();
		}
		
		[Column(Storage="_TransitID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int TransitID
		{
			get
			{
				return this._TransitID;
			}
			set
			{
				if ((this._TransitID != value))
				{
					this.OnTransitIDChanging(value);
					this.SendPropertyChanging();
					this._TransitID = value;
					this.SendPropertyChanged("TransitID");
					this.OnTransitIDChanged();
				}
			}
		}
		
		[Column(Storage="_X", DbType="Real NOT NULL")]
		[DataMember(Order=2)]
		public float X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this.OnXChanging(value);
					this.SendPropertyChanging();
					this._X = value;
					this.SendPropertyChanged("X");
					this.OnXChanged();
				}
			}
		}
		
		[Column(Storage="_Y", DbType="Real NOT NULL")]
		[DataMember(Order=3)]
		public float Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this.OnYChanging(value);
					this.SendPropertyChanging();
					this._Y = value;
					this.SendPropertyChanged("Y");
					this.OnYChanged();
				}
			}
		}
		
		[Column(Storage="_FromObjectID", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> FromObjectID
		{
			get
			{
				return this._FromObjectID;
			}
			set
			{
				if ((this._FromObjectID != value))
				{
					if (this._CelestialObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromObjectIDChanging(value);
					this.SendPropertyChanging();
					this._FromObjectID = value;
					this.SendPropertyChanged("FromObjectID");
					this.OnFromObjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_ToObjectID", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int ToObjectID
		{
			get
			{
				return this._ToObjectID;
			}
			set
			{
				if ((this._ToObjectID != value))
				{
					if (this._CelestialObject1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ToObjectID = value;
					this.SendPropertyChanged("ToObjectID");
					this.OnToObjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_FromX", DbType="Real NOT NULL")]
		[DataMember(Order=6)]
		public float FromX
		{
			get
			{
				return this._FromX;
			}
			set
			{
				if ((this._FromX != value))
				{
					this.OnFromXChanging(value);
					this.SendPropertyChanging();
					this._FromX = value;
					this.SendPropertyChanged("FromX");
					this.OnFromXChanged();
				}
			}
		}
		
		[Column(Storage="_FromY", DbType="Real NOT NULL")]
		[DataMember(Order=7)]
		public float FromY
		{
			get
			{
				return this._FromY;
			}
			set
			{
				if ((this._FromY != value))
				{
					this.OnFromYChanging(value);
					this.SendPropertyChanging();
					this._FromY = value;
					this.SendPropertyChanged("FromY");
					this.OnFromYChanged();
				}
			}
		}
		
		[Column(Storage="_ToX", DbType="Real NOT NULL")]
		[DataMember(Order=8)]
		public float ToX
		{
			get
			{
				return this._ToX;
			}
			set
			{
				if ((this._ToX != value))
				{
					this.OnToXChanging(value);
					this.SendPropertyChanging();
					this._ToX = value;
					this.SendPropertyChanged("ToX");
					this.OnToXChanged();
				}
			}
		}
		
		[Column(Storage="_ToY", DbType="Real NOT NULL")]
		[DataMember(Order=9)]
		public float ToY
		{
			get
			{
				return this._ToY;
			}
			set
			{
				if ((this._ToY != value))
				{
					this.OnToYChanging(value);
					this.SendPropertyChanging();
					this._ToY = value;
					this.SendPropertyChanged("ToY");
					this.OnToYChanged();
				}
			}
		}
		
		[Column(Storage="_StartBattleTurn", DbType="Int NOT NULL")]
		[DataMember(Order=10)]
		public int StartBattleTurn
		{
			get
			{
				return this._StartBattleTurn;
			}
			set
			{
				if ((this._StartBattleTurn != value))
				{
					this.OnStartBattleTurnChanging(value);
					this.SendPropertyChanging();
					this._StartBattleTurn = value;
					this.SendPropertyChanged("StartBattleTurn");
					this.OnStartBattleTurnChanged();
				}
			}
		}
		
		[Column(Storage="_EndBattleTurn", DbType="Int NOT NULL")]
		[DataMember(Order=11)]
		public int EndBattleTurn
		{
			get
			{
				return this._EndBattleTurn;
			}
			set
			{
				if ((this._EndBattleTurn != value))
				{
					this.OnEndBattleTurnChanging(value);
					this.SendPropertyChanging();
					this._EndBattleTurn = value;
					this.SendPropertyChanged("EndBattleTurn");
					this.OnEndBattleTurnChanged();
				}
			}
		}
		
		[Column(Storage="_Warp", DbType="Int NOT NULL")]
		[DataMember(Order=12)]
		public int Warp
		{
			get
			{
				return this._Warp;
			}
			set
			{
				if ((this._Warp != value))
				{
					this.OnWarpChanging(value);
					this.SendPropertyChanging();
					this._Warp = value;
					this.SendPropertyChanged("Warp");
					this.OnWarpChanged();
				}
			}
		}
		
		[Association(Name="Transit_Player", Storage="_Players", ThisKey="TransitID", OtherKey="TransitID")]
		[DataMember(Order=13, EmitDefaultValue=false)]
		public EntitySet<Player> Players
		{
			get
			{
				if ((this.serializing 
							&& (this._Players.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[Association(Name="Transit_Fleet", Storage="_Fleets", ThisKey="TransitID", OtherKey="TransitID")]
		[DataMember(Order=14, EmitDefaultValue=false)]
		public EntitySet<Fleet> Fleets
		{
			get
			{
				if ((this.serializing 
							&& (this._Fleets.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Fleets;
			}
			set
			{
				this._Fleets.Assign(value);
			}
		}
		
		[Association(Name="Transit_PopulationTransport", Storage="_PopulationTransports", ThisKey="TransitID", OtherKey="TransitID")]
		[DataMember(Order=15, EmitDefaultValue=false)]
		public EntitySet<PopulationTransport> PopulationTransports
		{
			get
			{
				if ((this.serializing 
							&& (this._PopulationTransports.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PopulationTransports;
			}
			set
			{
				this._PopulationTransports.Assign(value);
			}
		}
		
		[Association(Name="CelestialObject_Transit", Storage="_CelestialObject", ThisKey="FromObjectID", OtherKey="CelestialObjectID", IsForeignKey=true)]
		public CelestialObject CelestialObject
		{
			get
			{
				return this._CelestialObject.Entity;
			}
			set
			{
				CelestialObject previousValue = this._CelestialObject.Entity;
				if (((previousValue != value) 
							|| (this._CelestialObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CelestialObject.Entity = null;
						previousValue.Transits.Remove(this);
					}
					this._CelestialObject.Entity = value;
					if ((value != null))
					{
						value.Transits.Add(this);
						this._FromObjectID = value.CelestialObjectID;
					}
					else
					{
						this._FromObjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CelestialObject");
				}
			}
		}
		
		[Association(Name="CelestialObject_Transit1", Storage="_CelestialObject1", ThisKey="ToObjectID", OtherKey="CelestialObjectID", IsForeignKey=true)]
		public CelestialObject CelestialObject1
		{
			get
			{
				return this._CelestialObject1.Entity;
			}
			set
			{
				CelestialObject previousValue = this._CelestialObject1.Entity;
				if (((previousValue != value) 
							|| (this._CelestialObject1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CelestialObject1.Entity = null;
						previousValue.Transits1.Remove(this);
					}
					this._CelestialObject1.Entity = value;
					if ((value != null))
					{
						value.Transits1.Add(this);
						this._ToObjectID = value.CelestialObjectID;
					}
					else
					{
						this._ToObjectID = default(int);
					}
					this.SendPropertyChanged("CelestialObject1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Transit = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Transit = null;
		}
		
		private void attach_Fleets(Fleet entity)
		{
			this.SendPropertyChanging();
			entity.Transit = this;
		}
		
		private void detach_Fleets(Fleet entity)
		{
			this.SendPropertyChanging();
			entity.Transit = null;
		}
		
		private void attach_PopulationTransports(PopulationTransport entity)
		{
			this.SendPropertyChanging();
			entity.Transit = this;
		}
		
		private void detach_PopulationTransports(PopulationTransport entity)
		{
			this.SendPropertyChanging();
			entity.Transit = null;
		}
		
		private void Initialize()
		{
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._Fleets = new EntitySet<Fleet>(new Action<Fleet>(this.attach_Fleets), new Action<Fleet>(this.detach_Fleets));
			this._PopulationTransports = new EntitySet<PopulationTransport>(new Action<PopulationTransport>(this.attach_PopulationTransports), new Action<PopulationTransport>(this.detach_PopulationTransports));
			this._CelestialObject = default(EntityRef<CelestialObject>);
			this._CelestialObject1 = default(EntityRef<CelestialObject>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Fleet")]
	[DataContract()]
	public partial class Fleet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FleetID;
		
		private System.Nullable<int> _OrbitObjectID;
		
		private System.Nullable<int> _OwnerID;
		
		private int _Tactics;
		
		private System.Nullable<int> _TransitID;
		
		private EntitySet<FleetShip> _FleetShips;
		
		private EntityRef<CelestialObject> _CelestialObject;
		
		private EntityRef<Transit> _Transit;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFleetIDChanging(int value);
    partial void OnFleetIDChanged();
    partial void OnOrbitObjectIDChanging(System.Nullable<int> value);
    partial void OnOrbitObjectIDChanged();
    partial void OnOwnerIDChanging(System.Nullable<int> value);
    partial void OnOwnerIDChanged();
    partial void OnTacticsChanging(int value);
    partial void OnTacticsChanged();
    partial void OnTransitIDChanging(System.Nullable<int> value);
    partial void OnTransitIDChanged();
    #endregion
		
		public Fleet()
		{
			this.Initialize();
		}
		
		[Column(Storage="_FleetID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public int FleetID
		{
			get
			{
				return this._FleetID;
			}
			set
			{
				if ((this._FleetID != value))
				{
					this.OnFleetIDChanging(value);
					this.SendPropertyChanging();
					this._FleetID = value;
					this.SendPropertyChanged("FleetID");
					this.OnFleetIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrbitObjectID", DbType="Int")]
		[DataMember(Order=2)]
		public System.Nullable<int> OrbitObjectID
		{
			get
			{
				return this._OrbitObjectID;
			}
			set
			{
				if ((this._OrbitObjectID != value))
				{
					if (this._CelestialObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrbitObjectIDChanging(value);
					this.SendPropertyChanging();
					this._OrbitObjectID = value;
					this.SendPropertyChanged("OrbitObjectID");
					this.OnOrbitObjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerID", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Tactics", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int Tactics
		{
			get
			{
				return this._Tactics;
			}
			set
			{
				if ((this._Tactics != value))
				{
					this.OnTacticsChanging(value);
					this.SendPropertyChanging();
					this._Tactics = value;
					this.SendPropertyChanged("Tactics");
					this.OnTacticsChanged();
				}
			}
		}
		
		[Column(Storage="_TransitID", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> TransitID
		{
			get
			{
				return this._TransitID;
			}
			set
			{
				if ((this._TransitID != value))
				{
					if (this._Transit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransitIDChanging(value);
					this.SendPropertyChanging();
					this._TransitID = value;
					this.SendPropertyChanged("TransitID");
					this.OnTransitIDChanged();
				}
			}
		}
		
		[Association(Name="Fleet_FleetShip", Storage="_FleetShips", ThisKey="FleetID", OtherKey="FleetID")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<FleetShip> FleetShips
		{
			get
			{
				if ((this.serializing 
							&& (this._FleetShips.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._FleetShips;
			}
			set
			{
				this._FleetShips.Assign(value);
			}
		}
		
		[Association(Name="CelestialObject_Fleet", Storage="_CelestialObject", ThisKey="OrbitObjectID", OtherKey="CelestialObjectID", IsForeignKey=true)]
		public CelestialObject CelestialObject
		{
			get
			{
				return this._CelestialObject.Entity;
			}
			set
			{
				CelestialObject previousValue = this._CelestialObject.Entity;
				if (((previousValue != value) 
							|| (this._CelestialObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CelestialObject.Entity = null;
						previousValue.Fleets.Remove(this);
					}
					this._CelestialObject.Entity = value;
					if ((value != null))
					{
						value.Fleets.Add(this);
						this._OrbitObjectID = value.CelestialObjectID;
					}
					else
					{
						this._OrbitObjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CelestialObject");
				}
			}
		}
		
		[Association(Name="Transit_Fleet", Storage="_Transit", ThisKey="TransitID", OtherKey="TransitID", IsForeignKey=true)]
		public Transit Transit
		{
			get
			{
				return this._Transit.Entity;
			}
			set
			{
				Transit previousValue = this._Transit.Entity;
				if (((previousValue != value) 
							|| (this._Transit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transit.Entity = null;
						previousValue.Fleets.Remove(this);
					}
					this._Transit.Entity = value;
					if ((value != null))
					{
						value.Fleets.Add(this);
						this._TransitID = value.TransitID;
					}
					else
					{
						this._TransitID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Transit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FleetShips(FleetShip entity)
		{
			this.SendPropertyChanging();
			entity.Fleet = this;
		}
		
		private void detach_FleetShips(FleetShip entity)
		{
			this.SendPropertyChanging();
			entity.Fleet = null;
		}
		
		private void Initialize()
		{
			this._FleetShips = new EntitySet<FleetShip>(new Action<FleetShip>(this.attach_FleetShips), new Action<FleetShip>(this.detach_FleetShips));
			this._CelestialObject = default(EntityRef<CelestialObject>);
			this._Transit = default(EntityRef<Transit>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.PopulationTransport")]
	[DataContract()]
	public partial class PopulationTransport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PopulationTransportID;
		
		private int _OwnerID;
		
		private int _TransitID;
		
		private int _Count;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Transit> _Transit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPopulationTransportIDChanging(int value);
    partial void OnPopulationTransportIDChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnTransitIDChanging(int value);
    partial void OnTransitIDChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    #endregion
		
		public PopulationTransport()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PopulationTransportID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PopulationTransportID
		{
			get
			{
				return this._PopulationTransportID;
			}
			set
			{
				if ((this._PopulationTransportID != value))
				{
					this.OnPopulationTransportIDChanging(value);
					this.SendPropertyChanging();
					this._PopulationTransportID = value;
					this.SendPropertyChanged("PopulationTransportID");
					this.OnPopulationTransportIDChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerID", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_TransitID", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int TransitID
		{
			get
			{
				return this._TransitID;
			}
			set
			{
				if ((this._TransitID != value))
				{
					if (this._Transit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransitIDChanging(value);
					this.SendPropertyChanging();
					this._TransitID = value;
					this.SendPropertyChanged("TransitID");
					this.OnTransitIDChanged();
				}
			}
		}
		
		[Column(Storage="_Count", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[Association(Name="Player_PopulationTransport", Storage="_Player", ThisKey="OwnerID", OtherKey="PlayerID", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.PopulationTransports.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.PopulationTransports.Add(this);
						this._OwnerID = value.PlayerID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[Association(Name="Transit_PopulationTransport", Storage="_Transit", ThisKey="TransitID", OtherKey="TransitID", IsForeignKey=true)]
		public Transit Transit
		{
			get
			{
				return this._Transit.Entity;
			}
			set
			{
				Transit previousValue = this._Transit.Entity;
				if (((previousValue != value) 
							|| (this._Transit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transit.Entity = null;
						previousValue.PopulationTransports.Remove(this);
					}
					this._Transit.Entity = value;
					if ((value != null))
					{
						value.PopulationTransports.Add(this);
						this._TransitID = value.TransitID;
					}
					else
					{
						this._TransitID = default(int);
					}
					this.SendPropertyChanged("Transit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Player = default(EntityRef<Player>);
			this._Transit = default(EntityRef<Transit>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.StructureType")]
	[DataContract()]
	public partial class StructureType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StructureTypeID;
		
		private string _Name;
		
		private int _CostMetal;
		
		private int _MakesMetal;
		
		private int _MakesFood;
		
		private int _BuildsMetal;
		
		private int _MakesPeople;
		
		private int _NeedsPeople;
		
		private int _StoresPeople;
		
		private System.Nullable<int> _NeedsTechID;
		
		private int _HitPoints;
		
		private int _MakesResearch;
		
		private int _LaserDamage;
		
		private int _MissileDamage;
		
		private EntitySet<CelestialObjectStructure> _CelestialObjectStructures;
		
		private EntitySet<MothershipStructure> _MothershipStructures;
		
		private EntityRef<Tech> _Tech;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStructureTypeIDChanging(int value);
    partial void OnStructureTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCostMetalChanging(int value);
    partial void OnCostMetalChanged();
    partial void OnMakesMetalChanging(int value);
    partial void OnMakesMetalChanged();
    partial void OnMakesFoodChanging(int value);
    partial void OnMakesFoodChanged();
    partial void OnBuildsMetalChanging(int value);
    partial void OnBuildsMetalChanged();
    partial void OnMakesPeopleChanging(int value);
    partial void OnMakesPeopleChanged();
    partial void OnNeedsPeopleChanging(int value);
    partial void OnNeedsPeopleChanged();
    partial void OnStoresPeopleChanging(int value);
    partial void OnStoresPeopleChanged();
    partial void OnNeedsTechIDChanging(System.Nullable<int> value);
    partial void OnNeedsTechIDChanged();
    partial void OnHitPointsChanging(int value);
    partial void OnHitPointsChanged();
    partial void OnMakesResearchChanging(int value);
    partial void OnMakesResearchChanged();
    partial void OnLaserDamageChanging(int value);
    partial void OnLaserDamageChanged();
    partial void OnMissileDamageChanging(int value);
    partial void OnMissileDamageChanged();
    #endregion
		
		public StructureType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_StructureTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int StructureTypeID
		{
			get
			{
				return this._StructureTypeID;
			}
			set
			{
				if ((this._StructureTypeID != value))
				{
					this.OnStructureTypeIDChanging(value);
					this.SendPropertyChanging();
					this._StructureTypeID = value;
					this.SendPropertyChanged("StructureTypeID");
					this.OnStructureTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CostMetal", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int CostMetal
		{
			get
			{
				return this._CostMetal;
			}
			set
			{
				if ((this._CostMetal != value))
				{
					this.OnCostMetalChanging(value);
					this.SendPropertyChanging();
					this._CostMetal = value;
					this.SendPropertyChanged("CostMetal");
					this.OnCostMetalChanged();
				}
			}
		}
		
		[Column(Storage="_MakesMetal", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int MakesMetal
		{
			get
			{
				return this._MakesMetal;
			}
			set
			{
				if ((this._MakesMetal != value))
				{
					this.OnMakesMetalChanging(value);
					this.SendPropertyChanging();
					this._MakesMetal = value;
					this.SendPropertyChanged("MakesMetal");
					this.OnMakesMetalChanged();
				}
			}
		}
		
		[Column(Storage="_MakesFood", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int MakesFood
		{
			get
			{
				return this._MakesFood;
			}
			set
			{
				if ((this._MakesFood != value))
				{
					this.OnMakesFoodChanging(value);
					this.SendPropertyChanging();
					this._MakesFood = value;
					this.SendPropertyChanged("MakesFood");
					this.OnMakesFoodChanged();
				}
			}
		}
		
		[Column(Storage="_BuildsMetal", DbType="Int NOT NULL")]
		[DataMember(Order=6)]
		public int BuildsMetal
		{
			get
			{
				return this._BuildsMetal;
			}
			set
			{
				if ((this._BuildsMetal != value))
				{
					this.OnBuildsMetalChanging(value);
					this.SendPropertyChanging();
					this._BuildsMetal = value;
					this.SendPropertyChanged("BuildsMetal");
					this.OnBuildsMetalChanged();
				}
			}
		}
		
		[Column(Storage="_MakesPeople", DbType="Int NOT NULL")]
		[DataMember(Order=7)]
		public int MakesPeople
		{
			get
			{
				return this._MakesPeople;
			}
			set
			{
				if ((this._MakesPeople != value))
				{
					this.OnMakesPeopleChanging(value);
					this.SendPropertyChanging();
					this._MakesPeople = value;
					this.SendPropertyChanged("MakesPeople");
					this.OnMakesPeopleChanged();
				}
			}
		}
		
		[Column(Storage="_NeedsPeople", DbType="Int NOT NULL")]
		[DataMember(Order=8)]
		public int NeedsPeople
		{
			get
			{
				return this._NeedsPeople;
			}
			set
			{
				if ((this._NeedsPeople != value))
				{
					this.OnNeedsPeopleChanging(value);
					this.SendPropertyChanging();
					this._NeedsPeople = value;
					this.SendPropertyChanged("NeedsPeople");
					this.OnNeedsPeopleChanged();
				}
			}
		}
		
		[Column(Storage="_StoresPeople", DbType="Int NOT NULL")]
		[DataMember(Order=9)]
		public int StoresPeople
		{
			get
			{
				return this._StoresPeople;
			}
			set
			{
				if ((this._StoresPeople != value))
				{
					this.OnStoresPeopleChanging(value);
					this.SendPropertyChanging();
					this._StoresPeople = value;
					this.SendPropertyChanged("StoresPeople");
					this.OnStoresPeopleChanged();
				}
			}
		}
		
		[Column(Storage="_NeedsTechID", DbType="Int")]
		[DataMember(Order=10)]
		public System.Nullable<int> NeedsTechID
		{
			get
			{
				return this._NeedsTechID;
			}
			set
			{
				if ((this._NeedsTechID != value))
				{
					if (this._Tech.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNeedsTechIDChanging(value);
					this.SendPropertyChanging();
					this._NeedsTechID = value;
					this.SendPropertyChanged("NeedsTechID");
					this.OnNeedsTechIDChanged();
				}
			}
		}
		
		[Column(Storage="_HitPoints", DbType="Int NOT NULL")]
		[DataMember(Order=11)]
		public int HitPoints
		{
			get
			{
				return this._HitPoints;
			}
			set
			{
				if ((this._HitPoints != value))
				{
					this.OnHitPointsChanging(value);
					this.SendPropertyChanging();
					this._HitPoints = value;
					this.SendPropertyChanged("HitPoints");
					this.OnHitPointsChanged();
				}
			}
		}
		
		[Column(Storage="_MakesResearch", DbType="Int NOT NULL")]
		[DataMember(Order=12)]
		public int MakesResearch
		{
			get
			{
				return this._MakesResearch;
			}
			set
			{
				if ((this._MakesResearch != value))
				{
					this.OnMakesResearchChanging(value);
					this.SendPropertyChanging();
					this._MakesResearch = value;
					this.SendPropertyChanged("MakesResearch");
					this.OnMakesResearchChanged();
				}
			}
		}
		
		[Column(Storage="_LaserDamage", DbType="Int NOT NULL")]
		[DataMember(Order=13)]
		public int LaserDamage
		{
			get
			{
				return this._LaserDamage;
			}
			set
			{
				if ((this._LaserDamage != value))
				{
					this.OnLaserDamageChanging(value);
					this.SendPropertyChanging();
					this._LaserDamage = value;
					this.SendPropertyChanged("LaserDamage");
					this.OnLaserDamageChanged();
				}
			}
		}
		
		[Column(Storage="_MissileDamage", DbType="Int NOT NULL")]
		[DataMember(Order=14)]
		public int MissileDamage
		{
			get
			{
				return this._MissileDamage;
			}
			set
			{
				if ((this._MissileDamage != value))
				{
					this.OnMissileDamageChanging(value);
					this.SendPropertyChanging();
					this._MissileDamage = value;
					this.SendPropertyChanged("MissileDamage");
					this.OnMissileDamageChanged();
				}
			}
		}
		
		[Association(Name="StructureType_CelestialObjectStructure", Storage="_CelestialObjectStructures", ThisKey="StructureTypeID", OtherKey="StructureTypeID")]
		[DataMember(Order=15, EmitDefaultValue=false)]
		public EntitySet<CelestialObjectStructure> CelestialObjectStructures
		{
			get
			{
				if ((this.serializing 
							&& (this._CelestialObjectStructures.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CelestialObjectStructures;
			}
			set
			{
				this._CelestialObjectStructures.Assign(value);
			}
		}
		
		[Association(Name="StructureType_MothershipStructure", Storage="_MothershipStructures", ThisKey="StructureTypeID", OtherKey="StructureTypeID")]
		[DataMember(Order=16, EmitDefaultValue=false)]
		public EntitySet<MothershipStructure> MothershipStructures
		{
			get
			{
				if ((this.serializing 
							&& (this._MothershipStructures.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._MothershipStructures;
			}
			set
			{
				this._MothershipStructures.Assign(value);
			}
		}
		
		[Association(Name="Tech_StructureType", Storage="_Tech", ThisKey="NeedsTechID", OtherKey="TechID", IsForeignKey=true)]
		public Tech Tech
		{
			get
			{
				return this._Tech.Entity;
			}
			set
			{
				Tech previousValue = this._Tech.Entity;
				if (((previousValue != value) 
							|| (this._Tech.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tech.Entity = null;
						previousValue.StructureTypes.Remove(this);
					}
					this._Tech.Entity = value;
					if ((value != null))
					{
						value.StructureTypes.Add(this);
						this._NeedsTechID = value.TechID;
					}
					else
					{
						this._NeedsTechID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tech");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CelestialObjectStructures(CelestialObjectStructure entity)
		{
			this.SendPropertyChanging();
			entity.StructureType = this;
		}
		
		private void detach_CelestialObjectStructures(CelestialObjectStructure entity)
		{
			this.SendPropertyChanging();
			entity.StructureType = null;
		}
		
		private void attach_MothershipStructures(MothershipStructure entity)
		{
			this.SendPropertyChanging();
			entity.StructureType = this;
		}
		
		private void detach_MothershipStructures(MothershipStructure entity)
		{
			this.SendPropertyChanging();
			entity.StructureType = null;
		}
		
		private void Initialize()
		{
			this._CelestialObjectStructures = new EntitySet<CelestialObjectStructure>(new Action<CelestialObjectStructure>(this.attach_CelestialObjectStructures), new Action<CelestialObjectStructure>(this.detach_CelestialObjectStructures));
			this._MothershipStructures = new EntitySet<MothershipStructure>(new Action<MothershipStructure>(this.attach_MothershipStructures), new Action<MothershipStructure>(this.detach_MothershipStructures));
			this._Tech = default(EntityRef<Tech>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.ShipType")]
	[DataContract()]
	public partial class ShipType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShipTypeID;
		
		private int _Class;
		
		private int _LaserDamage;
		
		private int _MissileDamage;
		
		private int _BombDamage;
		
		private string _Name;
		
		private string _Shortcut;
		
		private System.Nullable<int> _NeedsTechID;
		
		private int _MetalCost;
		
		private int _Hitpoints;
		
		private EntitySet<FleetShip> _FleetShips;
		
		private EntitySet<CelestialObjectShip> _CelestialObjectShips;
		
		private EntityRef<Tech> _Tech;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShipTypeIDChanging(int value);
    partial void OnShipTypeIDChanged();
    partial void OnClassChanging(int value);
    partial void OnClassChanged();
    partial void OnLaserDamageChanging(int value);
    partial void OnLaserDamageChanged();
    partial void OnMissileDamageChanging(int value);
    partial void OnMissileDamageChanged();
    partial void OnBombDamageChanging(int value);
    partial void OnBombDamageChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortcutChanging(string value);
    partial void OnShortcutChanged();
    partial void OnNeedsTechIDChanging(System.Nullable<int> value);
    partial void OnNeedsTechIDChanged();
    partial void OnMetalCostChanging(int value);
    partial void OnMetalCostChanged();
    partial void OnHitpointsChanging(int value);
    partial void OnHitpointsChanged();
    #endregion
		
		public ShipType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ShipTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ShipTypeID
		{
			get
			{
				return this._ShipTypeID;
			}
			set
			{
				if ((this._ShipTypeID != value))
				{
					this.OnShipTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ShipTypeID = value;
					this.SendPropertyChanged("ShipTypeID");
					this.OnShipTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Class", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[Column(Storage="_LaserDamage", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int LaserDamage
		{
			get
			{
				return this._LaserDamage;
			}
			set
			{
				if ((this._LaserDamage != value))
				{
					this.OnLaserDamageChanging(value);
					this.SendPropertyChanging();
					this._LaserDamage = value;
					this.SendPropertyChanged("LaserDamage");
					this.OnLaserDamageChanged();
				}
			}
		}
		
		[Column(Storage="_MissileDamage", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int MissileDamage
		{
			get
			{
				return this._MissileDamage;
			}
			set
			{
				if ((this._MissileDamage != value))
				{
					this.OnMissileDamageChanging(value);
					this.SendPropertyChanging();
					this._MissileDamage = value;
					this.SendPropertyChanged("MissileDamage");
					this.OnMissileDamageChanged();
				}
			}
		}
		
		[Column(Storage="_BombDamage", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int BombDamage
		{
			get
			{
				return this._BombDamage;
			}
			set
			{
				if ((this._BombDamage != value))
				{
					this.OnBombDamageChanging(value);
					this.SendPropertyChanging();
					this._BombDamage = value;
					this.SendPropertyChanged("BombDamage");
					this.OnBombDamageChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		[DataMember(Order=6)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Shortcut", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		[DataMember(Order=7)]
		public string Shortcut
		{
			get
			{
				return this._Shortcut;
			}
			set
			{
				if ((this._Shortcut != value))
				{
					this.OnShortcutChanging(value);
					this.SendPropertyChanging();
					this._Shortcut = value;
					this.SendPropertyChanged("Shortcut");
					this.OnShortcutChanged();
				}
			}
		}
		
		[Column(Storage="_NeedsTechID", DbType="Int")]
		[DataMember(Order=8)]
		public System.Nullable<int> NeedsTechID
		{
			get
			{
				return this._NeedsTechID;
			}
			set
			{
				if ((this._NeedsTechID != value))
				{
					if (this._Tech.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNeedsTechIDChanging(value);
					this.SendPropertyChanging();
					this._NeedsTechID = value;
					this.SendPropertyChanged("NeedsTechID");
					this.OnNeedsTechIDChanged();
				}
			}
		}
		
		[Column(Storage="_MetalCost", DbType="int NOT NULL")]
		[DataMember(Order=9)]
		public int MetalCost
		{
			get
			{
				return this._MetalCost;
			}
			set
			{
				if ((this._MetalCost != value))
				{
					this.OnMetalCostChanging(value);
					this.SendPropertyChanging();
					this._MetalCost = value;
					this.SendPropertyChanged("MetalCost");
					this.OnMetalCostChanged();
				}
			}
		}
		
		[Column(Storage="_Hitpoints", DbType="int NOT NULL")]
		[DataMember(Order=10)]
		public int Hitpoints
		{
			get
			{
				return this._Hitpoints;
			}
			set
			{
				if ((this._Hitpoints != value))
				{
					this.OnHitpointsChanging(value);
					this.SendPropertyChanging();
					this._Hitpoints = value;
					this.SendPropertyChanged("Hitpoints");
					this.OnHitpointsChanged();
				}
			}
		}
		
		[Association(Name="ShipType_FleetShip", Storage="_FleetShips", ThisKey="ShipTypeID", OtherKey="ShipTypeID")]
		[DataMember(Order=11, EmitDefaultValue=false)]
		public EntitySet<FleetShip> FleetShips
		{
			get
			{
				if ((this.serializing 
							&& (this._FleetShips.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._FleetShips;
			}
			set
			{
				this._FleetShips.Assign(value);
			}
		}
		
		[Association(Name="ShipType_CelestialObjectShip", Storage="_CelestialObjectShips", ThisKey="ShipTypeID", OtherKey="ShipTypeID")]
		[DataMember(Order=12, EmitDefaultValue=false)]
		public EntitySet<CelestialObjectShip> CelestialObjectShips
		{
			get
			{
				if ((this.serializing 
							&& (this._CelestialObjectShips.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._CelestialObjectShips;
			}
			set
			{
				this._CelestialObjectShips.Assign(value);
			}
		}
		
		[Association(Name="Tech_ShipType", Storage="_Tech", ThisKey="NeedsTechID", OtherKey="TechID", IsForeignKey=true)]
		public Tech Tech
		{
			get
			{
				return this._Tech.Entity;
			}
			set
			{
				Tech previousValue = this._Tech.Entity;
				if (((previousValue != value) 
							|| (this._Tech.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tech.Entity = null;
						previousValue.ShipTypes.Remove(this);
					}
					this._Tech.Entity = value;
					if ((value != null))
					{
						value.ShipTypes.Add(this);
						this._NeedsTechID = value.TechID;
					}
					else
					{
						this._NeedsTechID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tech");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FleetShips(FleetShip entity)
		{
			this.SendPropertyChanging();
			entity.ShipType = this;
		}
		
		private void detach_FleetShips(FleetShip entity)
		{
			this.SendPropertyChanging();
			entity.ShipType = null;
		}
		
		private void attach_CelestialObjectShips(CelestialObjectShip entity)
		{
			this.SendPropertyChanging();
			entity.ShipType = this;
		}
		
		private void detach_CelestialObjectShips(CelestialObjectShip entity)
		{
			this.SendPropertyChanging();
			entity.ShipType = null;
		}
		
		private void Initialize()
		{
			this._FleetShips = new EntitySet<FleetShip>(new Action<FleetShip>(this.attach_FleetShips), new Action<FleetShip>(this.detach_FleetShips));
			this._CelestialObjectShips = new EntitySet<CelestialObjectShip>(new Action<CelestialObjectShip>(this.attach_CelestialObjectShips), new Action<CelestialObjectShip>(this.detach_CelestialObjectShips));
			this._Tech = default(EntityRef<Tech>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.Tech")]
	[DataContract()]
	public partial class Tech : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TechID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<int> _NeedsTechID;
		
		private int _CostResearch;
		
		private int _CostQuantium;
		
		private EntitySet<StarSystemTech> _StarSystemTeches;
		
		private EntitySet<PlayerTechSpent> _PlayerTechSpents;
		
		private EntitySet<StructureType> _StructureTypes;
		
		private EntitySet<ShipType> _ShipTypes;
		
		private EntitySet<Tech> _Teches;
		
		private EntityRef<Tech> _Tech1;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTechIDChanging(int value);
    partial void OnTechIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNeedsTechIDChanging(System.Nullable<int> value);
    partial void OnNeedsTechIDChanged();
    partial void OnCostResearchChanging(int value);
    partial void OnCostResearchChanged();
    partial void OnCostQuantiumChanging(int value);
    partial void OnCostQuantiumChanged();
    #endregion
		
		public Tech()
		{
			this.Initialize();
		}
		
		[Column(Storage="_TechID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int TechID
		{
			get
			{
				return this._TechID;
			}
			set
			{
				if ((this._TechID != value))
				{
					this.OnTechIDChanging(value);
					this.SendPropertyChanging();
					this._TechID = value;
					this.SendPropertyChanged("TechID");
					this.OnTechIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_NeedsTechID", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> NeedsTechID
		{
			get
			{
				return this._NeedsTechID;
			}
			set
			{
				if ((this._NeedsTechID != value))
				{
					if (this._Tech1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNeedsTechIDChanging(value);
					this.SendPropertyChanging();
					this._NeedsTechID = value;
					this.SendPropertyChanged("NeedsTechID");
					this.OnNeedsTechIDChanged();
				}
			}
		}
		
		[Column(Storage="_CostResearch", DbType="Int NOT NULL")]
		[DataMember(Order=5)]
		public int CostResearch
		{
			get
			{
				return this._CostResearch;
			}
			set
			{
				if ((this._CostResearch != value))
				{
					this.OnCostResearchChanging(value);
					this.SendPropertyChanging();
					this._CostResearch = value;
					this.SendPropertyChanged("CostResearch");
					this.OnCostResearchChanged();
				}
			}
		}
		
		[Column(Storage="_CostQuantium", DbType="Int NOT NULL")]
		[DataMember(Order=6)]
		public int CostQuantium
		{
			get
			{
				return this._CostQuantium;
			}
			set
			{
				if ((this._CostQuantium != value))
				{
					this.OnCostQuantiumChanging(value);
					this.SendPropertyChanging();
					this._CostQuantium = value;
					this.SendPropertyChanged("CostQuantium");
					this.OnCostQuantiumChanged();
				}
			}
		}
		
		[Association(Name="Tech_StarSystemTech", Storage="_StarSystemTeches", ThisKey="TechID", OtherKey="TechID")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<StarSystemTech> StarSystemTeches
		{
			get
			{
				if ((this.serializing 
							&& (this._StarSystemTeches.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._StarSystemTeches;
			}
			set
			{
				this._StarSystemTeches.Assign(value);
			}
		}
		
		[Association(Name="Tech_PlayerTechSpent", Storage="_PlayerTechSpents", ThisKey="TechID", OtherKey="TechID")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<PlayerTechSpent> PlayerTechSpents
		{
			get
			{
				if ((this.serializing 
							&& (this._PlayerTechSpents.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._PlayerTechSpents;
			}
			set
			{
				this._PlayerTechSpents.Assign(value);
			}
		}
		
		[Association(Name="Tech_StructureType", Storage="_StructureTypes", ThisKey="TechID", OtherKey="NeedsTechID")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<StructureType> StructureTypes
		{
			get
			{
				if ((this.serializing 
							&& (this._StructureTypes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._StructureTypes;
			}
			set
			{
				this._StructureTypes.Assign(value);
			}
		}
		
		[Association(Name="Tech_ShipType", Storage="_ShipTypes", ThisKey="TechID", OtherKey="NeedsTechID")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<ShipType> ShipTypes
		{
			get
			{
				if ((this.serializing 
							&& (this._ShipTypes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ShipTypes;
			}
			set
			{
				this._ShipTypes.Assign(value);
			}
		}
		
		[Association(Name="Tech_Tech", Storage="_Teches", ThisKey="TechID", OtherKey="NeedsTechID")]
		[DataMember(Order=11, EmitDefaultValue=false)]
		public EntitySet<Tech> Teches
		{
			get
			{
				if ((this.serializing 
							&& (this._Teches.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Teches;
			}
			set
			{
				this._Teches.Assign(value);
			}
		}
		
		[Association(Name="Tech_Tech", Storage="_Tech1", ThisKey="NeedsTechID", OtherKey="TechID", IsForeignKey=true)]
		public Tech Tech1
		{
			get
			{
				return this._Tech1.Entity;
			}
			set
			{
				Tech previousValue = this._Tech1.Entity;
				if (((previousValue != value) 
							|| (this._Tech1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tech1.Entity = null;
						previousValue.Teches.Remove(this);
					}
					this._Tech1.Entity = value;
					if ((value != null))
					{
						value.Teches.Add(this);
						this._NeedsTechID = value.TechID;
					}
					else
					{
						this._NeedsTechID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tech1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StarSystemTeches(StarSystemTech entity)
		{
			this.SendPropertyChanging();
			entity.Tech = this;
		}
		
		private void detach_StarSystemTeches(StarSystemTech entity)
		{
			this.SendPropertyChanging();
			entity.Tech = null;
		}
		
		private void attach_PlayerTechSpents(PlayerTechSpent entity)
		{
			this.SendPropertyChanging();
			entity.Tech = this;
		}
		
		private void detach_PlayerTechSpents(PlayerTechSpent entity)
		{
			this.SendPropertyChanging();
			entity.Tech = null;
		}
		
		private void attach_StructureTypes(StructureType entity)
		{
			this.SendPropertyChanging();
			entity.Tech = this;
		}
		
		private void detach_StructureTypes(StructureType entity)
		{
			this.SendPropertyChanging();
			entity.Tech = null;
		}
		
		private void attach_ShipTypes(ShipType entity)
		{
			this.SendPropertyChanging();
			entity.Tech = this;
		}
		
		private void detach_ShipTypes(ShipType entity)
		{
			this.SendPropertyChanging();
			entity.Tech = null;
		}
		
		private void attach_Teches(Tech entity)
		{
			this.SendPropertyChanging();
			entity.Tech1 = this;
		}
		
		private void detach_Teches(Tech entity)
		{
			this.SendPropertyChanging();
			entity.Tech1 = null;
		}
		
		private void Initialize()
		{
			this._StarSystemTeches = new EntitySet<StarSystemTech>(new Action<StarSystemTech>(this.attach_StarSystemTeches), new Action<StarSystemTech>(this.detach_StarSystemTeches));
			this._PlayerTechSpents = new EntitySet<PlayerTechSpent>(new Action<PlayerTechSpent>(this.attach_PlayerTechSpents), new Action<PlayerTechSpent>(this.detach_PlayerTechSpents));
			this._StructureTypes = new EntitySet<StructureType>(new Action<StructureType>(this.attach_StructureTypes), new Action<StructureType>(this.detach_StructureTypes));
			this._ShipTypes = new EntitySet<ShipType>(new Action<ShipType>(this.attach_ShipTypes), new Action<ShipType>(this.detach_ShipTypes));
			this._Teches = new EntitySet<Tech>(new Action<Tech>(this.attach_Teches), new Action<Tech>(this.detach_Teches));
			this._Tech1 = default(EntityRef<Tech>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
}
#pragma warning restore 1591
