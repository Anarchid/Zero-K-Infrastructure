//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MissionEditor2.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Binary", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Linq")]
    [System.SerializableAttribute()]
    public partial class Binary : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] BytesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Bytes {
            get {
                return this.BytesField;
            }
            set {
                if ((object.ReferenceEquals(this.BytesField, value) != true)) {
                    this.BytesField = value;
                    this.RaisePropertyChanged("Bytes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IMissionService")]
    public interface IMissionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissionService/DeleteMission", ReplyAction="http://tempuri.org/IMissionService/DeleteMissionResponse")]
        void DeleteMission(int missionID, string author, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissionService/GetMission", ReplyAction="http://tempuri.org/IMissionService/GetMissionResponse")]
        ZkData.Mission GetMission(string missionName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissionService/GetMissionByID", ReplyAction="http://tempuri.org/IMissionService/GetMissionByIDResponse")]
        ZkData.Mission GetMissionByID(int missionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissionService/ListMissionInfos", ReplyAction="http://tempuri.org/IMissionService/ListMissionInfosResponse")]
        System.Collections.Generic.List<ZkData.Mission> ListMissionInfos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMissionService/SendMission", ReplyAction="http://tempuri.org/IMissionService/SendMissionResponse")]
        void SendMission(ZkData.Mission mission, string author, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMissionServiceChannel : MissionEditor2.ServiceReference.IMissionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MissionServiceClient : System.ServiceModel.ClientBase<MissionEditor2.ServiceReference.IMissionService>, MissionEditor2.ServiceReference.IMissionService {
        
        public MissionServiceClient() {
        }
        
        public MissionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MissionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MissionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MissionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DeleteMission(int missionID, string author, string password) {
            base.Channel.DeleteMission(missionID, author, password);
        }
        
        public ZkData.Mission GetMission(string missionName) {
            return base.Channel.GetMission(missionName);
        }
        
        public ZkData.Mission GetMissionByID(int missionID) {
            return base.Channel.GetMissionByID(missionID);
        }
        
        public System.Collections.Generic.List<ZkData.Mission> ListMissionInfos() {
            return base.Channel.ListMissionInfos();
        }
        
        public void SendMission(ZkData.Mission mission, string author, string password) {
            base.Channel.SendMission(mission, author, password);
        }
    }
}
