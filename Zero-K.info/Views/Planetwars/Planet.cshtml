@using ZkData
@using ZeroKWeb
@model Planet
@{
  //  ViewBag.Title = "Planet";
  Page.Title = "Planet " + Model.Name;
  var autohost = Model.PlanetWarsHosts.FirstOrDefault();
}
<h1>
  @Html.Partial("PlanetIcon", Model)
  Planet @Model.Name
</h1>
@if (Model.OwnerAccountID == Global.AccountID) {
  <form method="post" action="@Url.Action("SubmitRenamePlanet")">
  <input type="hidden" name="planetID" value="@Model.PlanetID"/>
  <input type="text" name="newName" value="@Model.Name"/>
  <input type='submit' value="Rename Planet" />
  </form>
}

@if (autohost != null) { 
  <b>
  @if (autohost.InGame) {
    <a href='spring://@Url.Action("Planet", "Planetwars", new { id = Model.PlanetID}, Request.Url.Scheme)@@join_player:@autohost.Account.Name'>Battle in progress, JOIN TO WATCH</a>
  }  else {
    <a href='spring://@Url.Action("Planet", "Planetwars", new { id = Model.PlanetID}, Request.Url.Scheme)@@join_player:@autohost.Account.Name'>Battle has @autohost.Players players wiating, JOIN IT</a>
  }
  </b>
}

<table>
  <tr>
    <td valign='top'>
      <h3>
        Influence</h3>
      @Html.Partial("InfluenceList", Model.AccountPlanets)
      <h3>
        Dropships</h3>
      @Html.Partial("PlanetDropships", Model) 
    </td>
    <td valign="top">
      <h3>Summary</h3>
      @Html.Partial("PlanetSummary", Model)

    </td>

    <td valign='top'>
    <h3>Surface scan</h3>
      @Html.ActionLink(Model.Resource.InternalName, "Detail", "Maps", new { id = Model.MapResourceID }, new { title = "$map$" + Model.MapResourceID })
      <table>
        <tr>
          <td valign='top'>
            <span style="margin: 0; padding: 0; border: 1px dashed gray; display: table-cell;
              text-align: center; vertical-align: middle; width: 96px; height: 96px;" title="$map$@Model.MapResourceID"><a href='@Url.Action("Detail", "Maps", new { id = Model.Resource.ResourceID })'>
                <img src='http://zero-k.info/Resources/@Model.Resource.ThumbnailName' style="margin:0px;padding:0px;"/>
              </a></span>
          </td>
          <td valign='top'>
            <table>
              <tr>
                <td>
                  Size:
                </td>
                <td>@Model.Resource.MapWidth x @Model.Resource.MapHeight
                </td>
              </tr>
              <tr>
                <td colspan='2'>
                  <small>
                    @{Html.RenderPartial("~/Views/Maps/MapTags.cshtml", Model.Resource);}
                  </small>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<br />
@if (Global.IsAccountAuthorized) {
  if (Global.Account.DropshipCount <= 0) {
   <span>You have no free dropships to send here</span>
  } else {
  <form action='@Url.Action("SendDropships", "Planetwars", new { planetID = Model.PlanetID })' method="post">
  Number of dropships to send (@Global.Account.DropshipCount ready): <input type="text" name="count" /> <input type="submit" value="send" />
  </form>
                          if (!Galaxy.AccessiblePlanets(new ZkDataContext(), Global.ClanID, AllyStatus.Alliance).Any(x => x.PlanetID == Model.PlanetID)) {
    <span>You cannot access this planet through wormholes - jumpgate must be used</span>  
                          }
  }
}

<h3>Navigation</h3>
<ul>
@foreach (var p in Model.LinksByPlanetID1.Union(Model.LinksByPlanetID2)) {
  var planet = p.PlanetByPlanetID1 == Model ? p.PlanetByPlanetID2 : p.PlanetByPlanetID1;
  <li style='color:@(p.LinktStrength > 0 ? "":"red")'>@Html.PrintPlanet(planet) - link @(p.LinktStrength*100)%</li>
}
</ul>


@if (Model.Account != null && Global.ClanID == Model.Account.ClanID) {
    <h2>Construction</h2>
    foreach (var structure in Model.PlanetStructures.Where(s => s.IsDestroyed))
    {
        if (structure.StructureType.Cost > Global.Account.Credits) 
            {
                <p>@String.Format("Repair {0} (requires {1})", structure.StructureType.Name, structure.StructureType.Cost)</p>
            }
            else
            {
                var linkText = String.Format("Repair {0} ({1})", structure.StructureType.Name, structure.StructureType.Cost);
                <p>@Html.ActionLink(linkText, "RepairStructure", new { planetID = Model.PlanetID, structureTypeID = structure.StructureTypeID })</p>
            }
    }
    foreach (var structure in Model.PlanetStructures.Where(s => !s.IsDestroyed))
    {

        var upgrade = structure.StructureType.ParentStructureTypeByUpgradesToStructureID;
        if (upgrade != null)
        {
            if (upgrade.Cost > Global.Account.Credits)
            {
                <p>@String.Format("Upgrade {0} to {1} (requires {2})", structure.StructureType.Name, upgrade.Name, upgrade.Cost)</p>
            }
            else
            {
                var linkText = String.Format("Upgrade {0} to {1} ({2})", structure.StructureType.Name, upgrade.Name, upgrade.Cost);
                <p>@Html.ActionLink(linkText, "UpgradeStructure", new { planetID = Model.PlanetID, structureTypeID = structure.StructureTypeID })</p>
            }

        }
    }
    using (var db = new ZkDataContext())
    {
        var planet = db.Planets.Single(p => p.PlanetID == Model.PlanetID);
        foreach (var structureType in db.StructureTypes.Where(s => s.IsBuildable))
        {
            if (!StructureType.HasStructureOrUpgrades(db, planet, structureType))
            {
                if (structureType.Cost > Global.Account.Credits)
                {
                    <p>@String.Format("Build {0} (requires {1})", structureType.Name, structureType.Cost)</p>
                }
                else
                {
                    var linkText = String.Format("Build {0} ({1})", structureType.Name, structureType.Cost);
                    <p>@Html.ActionLink(linkText, "BuildStructure", new { planetID = Model.PlanetID, structureTypeID = structureType.StructureTypeID })</p>
                }
            }
        }
    }
}


<h2>Influence trading</h2>
<h3>Sell Offers</h3>
      <table>
        <tr>
            <th>Quantity</th>
            <th>Price/unit</th>
            <th>Seller</th>
        </tr>
    @foreach (var offer in Model.MarketOffers.Where(o => o.IsSell && o.DateAccepted == null).OrderBy(o => o.Price))
    {
        var sellerAccountPlanet = Model.AccountPlanets.SingleOrDefault(ap => ap.AccountID == offer.AccountID);
        var maxWillSell = 0;
        if (sellerAccountPlanet != null)
        {
            maxWillSell = Math.Min(sellerAccountPlanet.Influence, offer.Quantity);
        }
        <tr>                
            <td>@maxWillSell&nbsp(@offer.Quantity)</td>
            <td>@offer.Price</td>
            <td>@Html.PrintAccount(offer.AccountByAccountID)</td>
            @if (offer.AccountID == Global.AccountID)
            {
                <td>@Html.ActionLink("Cancel", "CancelMarketOrder", new { offerID = offer.OfferID, planetID = Model.PlanetID })</td>
            }
        </tr>
    }
    </table>

@if (Global.Account != null)
{
  var temp = Model.AccountPlanets.SingleOrDefault(ap => ap.AccountID == Global.AccountID);
  var myInfluence = 0;
  if (temp != null) {
    myInfluence = temp.Influence;
  }
  
  <form method="post" action="@Url.Action("SubmitSellOrder")">
      <input type="hidden" name="planetID" value="@Model.PlanetID"/>
      Quantity (influence): <input type="text" name="quantity" value="@myInfluence"/>
      Price (per unit): <input type="text" name="price" value=""/>
      <input type='submit' value="Place Sell Order" />
  </form>
}
<h4>Buy Offer</h4>
      <table>
        <tr>
            <th>Quantity</th>
            <th>Price/unit</th>
            <th>Buyer</th>
        </tr>
    @foreach (var offer in Model.MarketOffers.Where(o => !o.IsSell && o.DateAccepted == null).OrderBy(o => o.Price))
    {
      var maxWillBuy = offer.Price >0  ?  Math.Min(offer.AccountByAccountID.Credits / offer.Price, offer.Quantity) : offer.Quantity;
        <tr>
            <td>@maxWillBuy&nbsp(@offer.Quantity)</td>
            <td>@offer.Price</td>
            <td>@Html.PrintAccount(offer.AccountByAccountID)</td>
            @if (offer.AccountID == Global.AccountID)
            {
                <td>@Html.ActionLink("Cancel", "CancelMarketOrder", new { offerID = offer.OfferID, planetID = Model.PlanetID })</td>
            }
        </tr>
    }
    </table>
    @if (Global.Account != null)
    {
    <form method="post" action="@Url.Action("SubmitBuyOrder")">
        <input type="hidden" name="planetID" value="@Model.PlanetID"/>
        Quantity (influence): <input type="text" name="quantity" value="0"/>
        Price (per unit): <input type="text" name="price" value="0"/>
        <input type='submit' value="Place Buy Order" />
    </form>
    }
<h2>
  Structures</h2>
@foreach (var structure in Model.PlanetStructures)
{
     
  <p>
    <img  width="32" height="32" src='@structure.GetImageUrl()'/>@structure.StructureType.Name
    (@structure.StructureType.Description)</p>
}
<h3>@Model.Name events</h3>
@Html.Action("Events", new { planetID = Model.PlanetID, partial = true })

@Html.Partial("CommentList", new ZeroKWeb.Models.CommentList() { Thread = Model.ForumThread, ActionData = new { planetID = Model.PlanetID, threadID = Model.ForumThreadID } })

