@using ZkData
@using ZeroKWeb
@model Planet
@{
	ViewBag.Title = "Planet";
	Page.Title = "Planet " + Model.Name;
	var autohost = Global.Nightwatch.GetPlanetBattles(Model).OrderByDescending(x=>x.Users.Count).FirstOrDefault();
	var db = new ZkData.ZkDataContext();
}
<h1>Planet @Model.Name
</h1>
<table>
	<tr>
		<td>
			@Html.Partial("PlanetIcon", Model)
		</td>
		<td>
			@Html.Partial("MapInfoBox", Model.Resource)
		</td>
		<td>
			@foreach (var p in Model.LinksByPlanetID1.Union(Model.LinksByPlanetID2)) {
		 var planet = p.PlanetByPlanetID1 == Model ? p.PlanetByPlanetID2 : p.PlanetByPlanetID1;
				<li style='color:@(p.LinktStrength > 0 ? "" : "#ff0000")'>@Html.PrintPlanet(planet)
					- link @(p.LinktStrength * 100)%</li>
	 }
		</td>
	</tr>
</table>
@if (Model.OwnerAccountID == Global.AccountID && Global.Clan != null) {
	<form method="post" action="@Url.Action("SubmitRenamePlanet")">
	<input type="hidden" name="planetID" value="@Model.PlanetID"/>
	<input type="text" name="newName" value="@Model.Name"/>
	<input type='submit' value="Rename Planet" />
	</form>
}
@if (autohost != null) { 
	<b>
		@if (autohost.IsInGame) {
			<a href='spring://@Url.Action("Planet", "Planetwars", new { id = Model.PlanetID }, Request.Url.Scheme)@@join_player:@autohost.Founder'>
				Battle in progress, JOIN TO WATCH</a>
	} else {
			<a href='spring://@Url.Action("Planet", "Planetwars", new { id = Model.PlanetID }, Request.Url.Scheme)@@join_player:@autohost.Founder'>
				Battle has @autohost.Users.Count players waiting, JOIN IT</a>
	}
	</b>
}
@{
	var galaxy = db.Galaxies.Single(g => g.IsDefault);
	var mapWidth = 700;
	var mapHeight = 500;
}
@section head {
	<script type="text/javascript">
		$(document).ready(function () {
			$("#tabs").tabs();
		});
	</script>
	<script type="text/javascript">
        window.onload = function () 
        {
            var paper = Raphael(document.getElementById("minimap"), @mapWidth, @mapHeight);

            @foreach (var link in galaxy.Links) {
							var p1 = link.PlanetByPlanetID1;
							var p2 = link.PlanetByPlanetID2;

							var x1 = p1.X * mapWidth;
							var y1 = p1.Y * mapHeight;
							var x2 = p2.X * mapWidth;
							var y2 = p2.Y * mapHeight;


							if (link.LinktStrength == 0) {
                    @: var l = paper.path("@String.Format("M{0:0} {1:0}L{2:0} {3:0}", x1, y1, x2, y2)");
                    @: l.attr({
                    @:  "stroke-width": "2",
                    @:  "stroke": "#d3d3d3",
                    @:  "stroke-dasharray": "-."
                    @: });
                } else {
								var width = link.LinktStrength * 10 - 2;
								var color1 = p1.GetColor(Global.Account);
								var color2 = p2.GetColor(Global.Account);
								var angle = -Math.Atan2(x2 - x1, y2 - y1) / Math.PI * 180;
								var length = Math.Sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
                    @: var r = paper.rect(@x1-@width/2, @y1, @width, @length);
                    @: r.attr({
                    @:  "fill": "90-@color2-@color1",
                    @:  "stroke": "none"
                    @: });
                    @: r.rotate(@angle, @x1, @y1);
                }

						} 

            @foreach (var planet in galaxy.Planets) {
							var mapIconSize = 10;
							var stroke = "#000000";
							if (planet.PlanetID == Model.PlanetID) {
								mapIconSize *= 2;
								stroke = "#ffffff";
							}
                @: var circle = paper.circle(@(planet.X * mapWidth), @(planet.Y * mapHeight), @mapIconSize);
                @: circle.attr({
                @:  "fill": "@planet.GetColor(Global.Account)",
                @:  "stroke": "@stroke",
                @:  "stroke-width": "3"
                @: });
            }
        };
	</script>
}
@Html.Partial("PlanetSummary", Model)
<div id="tabs">
	<ul>
		<li><a href="#influence"><span>Influence</span></a></li>
		<li><a href="#dropships"><span>Starships</span></a></li>
		<li><a href="#structures"><span>Structures</span></a></li>
		<li><a href="#trade"><span>Trade</span></a></li>
		<li><a href="#events"><span>Events</span></a></li>
		<li><a href="#minimap"><span>Navigation</span></a></li>
	</ul>
	<div id="influence">
        
        @Html.Partial("InfluenceList", Model.AccountPlanets)
	</div>
	<div id="dropships">
		@Html.Partial("PlanetDropships", Model)
		@if (Global.IsAccountAuthorized) {
		if (Global.Account.GetDropshipsAvailable() <= 0) {
			<span>You have no free starships - fight more battles</span>
		} else {
			var accessiblePlanets = Galaxy.DropshipAttackablePlanets(new ZkDataContext(), Global.ClanID).Select(x => x.PlanetID).ToList();
			var isAccessible = accessiblePlanets.Contains(Model.PlanetID);
			var jumpgates = Global.Account.GetJumpGateCapacity();
			var defs = Model.PlanetStructures.Where(x => !x.IsDestroyed).Sum(x => x.StructureType.EffectDropshipDefense) ?? 0;
			var bombNeed = 3 + defs / 3;
			var enemyShips = Model.AccountPlanets.Where(x => x.Account.ClanID != Global.ClanID).Sum(x => x.DropshipCount);
			if (isAccessible || jumpgates > 0) {
				var avail = isAccessible ? Global.Account.GetDropshipsAvailable() : Math.Min(jumpgates, Global.Account.GetDropshipsAvailable());
			<form action='@Url.Action("SendDropships", "Planetwars", new { planetID = Model.PlanetID })' method="post">
			Invade planet (@avail) @(!isAccessible ? "JUMPGATE" : ""):
			<input type="text" name="count" />
			<input type="submit" value="send" />
			</form> <br />
			
		    if (avail >= bombNeed) {
			    @Html.ActionLink("Bombard planet with " + bombNeed + " ships", "BombPlanet", new { planetID = Model.PlanetID, title="Destroys random structure and reduces 3% of influence. If there is no structure on planet, reduces 10% of influence. Bombing needs 3 + planet defense/3 ships. " })<br/>
				}
			} else {
			<span>You cannot access this planet through link of wormholes</span>  
			}
		}
	}
	</div>
	<div id="minimap">
	</div>
	<div id="structures">
		@foreach (var structure in Model.PlanetStructures) {
     
			<p>
				<img  width="80" height="80" src='@structure.GetImageUrl()'/>
				@if (structure.IsDestroyed) {
					<span style='color: red'>DESTROYED</span>
		}
				@structure.StructureType.Name
				(@structure.StructureType.Description)</p>
	}
		@if (Model.Account != null && Global.ClanID == Model.Account.ClanID) {
			<h2>Construction</h2>
		foreach (var structure in Model.PlanetStructures.Where(s => !s.IsDestroyed)) {
		
				var linkText = String.Format("Repair {0} ({1:C0})", structure.StructureType.Name, structure.StructureType.Cost);
			<p>@Html.ActionLink(linkText, "RepairStructure", new { planetID = Model.PlanetID, structureTypeID = structure.StructureTypeID })</p>
			
		}

		if (Model.OwnerAccountID == Global.AccountID) {
			foreach (var structure in Model.PlanetStructures.Where(s => !s.IsDestroyed)) {

				var upgrade = structure.StructureType.ParentStructureTypeByUpgradesToStructureID;
				if (upgrade != null) {
					if (upgrade.Cost > Global.Account.GetMetalAvailable()) {
			<p>@String.Format("Upgrade {0} to {1} (requires {2:C0}) - {3}", structure.StructureType.Name, upgrade.Name, upgrade.Cost, upgrade.Description)</p>
					} else {
						var linkText = String.Format("Upgrade {0} to {1} ({2:C0}) - {3}", structure.StructureType.Name, upgrade.Name, upgrade.Cost, upgrade.Description);
			<p>@Html.ActionLink(linkText, "UpgradeStructure", new { planetID = Model.PlanetID, structureTypeID = structure.StructureTypeID })</p>
					}

				}
			}

			var planet = db.Planets.Single(p => p.PlanetID == Model.PlanetID);
			foreach (var structureType in db.StructureTypes.Where(s => s.IsBuildable)) {
				if (!StructureType.HasStructureOrUpgrades(db, planet, structureType)) {
					if (structureType.Cost > Global.Account.GetMetalAvailable()) {
			<p>@String.Format("Build {0} (requires {1:C0}) - {2}", structureType.Name, structureType.Cost, structureType.Description)</p>
					} else {
						var linkText = String.Format("Build {0} ({1:C0}) - {2}", structureType.Name, structureType.Cost, structureType.Description);
			<p>@Html.ActionLink(linkText, "BuildStructure", new { planetID = Model.PlanetID, structureTypeID = structureType.StructureTypeID })</p>
					}
				}
			}
			foreach (var structureType in db.StructureTypes.Where(s => s.IsBuildable)) {
				if (StructureType.HasStructureOrUpgrades(db, planet, structureType)) {
                    var linkText = String.Format("Destroy {0}", structureType.Name, structureType.Cost);
                    var question = String.Format("Confirm destruction of {0}?", structureType.Name);
			<p>@Html.ActionLink(linkText, "DestroyStructure", new { planetID = Model.PlanetID, structureTypeID = structureType.StructureTypeID }, new { @onclick = String.Format("return confirm('{0}')", question) })</p>
                }
            }

        }

  }
	</div>
	<div id="events">
		@Html.Action("Events", new { planetID = Model.PlanetID, partial = true })
	</div>

</div>
	<br />
@Html.Partial("CommentList", new ZeroKWeb.Models.CommentList() { Thread = Model.ForumThread, ActionData = new { planetID = Model.PlanetID, threadID = Model.ForumThreadID } })
