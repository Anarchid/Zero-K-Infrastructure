//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 


/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
[DebuggerStepThrough()]
[DesignerCategory("code")]
[WebServiceBinding(Name = "EditorServiceSoap", Namespace = "http://SpringMissionEditor/")]
public partial class EditorService: SoapHttpClientProtocol
{
    SendOrPostCallback AddCommentOperationCompleted;

    SendOrPostCallback DeleteMissionOperationCompleted;

    SendOrPostCallback GetMissionByIDOperationCompleted;
    SendOrPostCallback GetMissionOperationCompleted;

    SendOrPostCallback GetScoresOperationCompleted;

    SendOrPostCallback ListCommentsOperationCompleted;

    SendOrPostCallback ListMissionInfosOperationCompleted;

    SendOrPostCallback RateOperationCompleted;

    SendOrPostCallback SendMissionOperationCompleted;

    SendOrPostCallback SubmitScoreOperationCompleted;

    /// <remarks/>
    public event AddCommentCompletedEventHandler AddCommentCompleted;

    /// <remarks/>
    public event DeleteMissionCompletedEventHandler DeleteMissionCompleted;

    /// <remarks/>
    public event GetMissionByIDCompletedEventHandler GetMissionByIDCompleted;
    /// <remarks/>
    public event GetMissionCompletedEventHandler GetMissionCompleted;

    /// <remarks/>
    public event GetScoresCompletedEventHandler GetScoresCompleted;

    /// <remarks/>
    public event ListCommentsCompletedEventHandler ListCommentsCompleted;

    /// <remarks/>
    public event ListMissionInfosCompletedEventHandler ListMissionInfosCompleted;

    /// <remarks/>
    public event RateCompletedEventHandler RateCompleted;

    /// <remarks/>
    public event SendMissionCompletedEventHandler SendMissionCompleted;

    /// <remarks/>
    public event SubmitScoreCompletedEventHandler SubmitScoreCompleted;

    /// <remarks/>
    public EditorService()
    {
        Url = "http://planet-wars.eu/MissionEditorServer/EditorService.asmx";
    }

    /// <remarks/>
    [SoapDocumentMethod("http://SpringMissionEditor/AddComment", RequestNamespace = "http://SpringMissionEditor/",
        ResponseNamespace = "http://SpringMissionEditor/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void AddComment(string nick, int missionID, string text)
    {
        Invoke("AddComment", new object[] { nick, missionID, text });
    }

    /// <remarks/>
    public void AddCommentAsync(string nick, int missionID, string text)
    {
        AddCommentAsync(nick, missionID, text, null);
    }

    /// <remarks/>
    public void AddCommentAsync(string nick, int missionID, string text, object userState)
    {
        if ((AddCommentOperationCompleted == null)) AddCommentOperationCompleted = new SendOrPostCallback(OnAddCommentOperationCompleted);
        InvokeAsync("AddComment", new object[] { nick, missionID, text }, AddCommentOperationCompleted, userState);
    }

    /// <remarks/>
    public IAsyncResult BeginAddComment(string nick, int missionID, string text, AsyncCallback callback, object asyncState)
    {
        return BeginInvoke("AddComment", new object[] { nick, missionID, text }, callback, asyncState);
    }

    /// <remarks/>
    public IAsyncResult BeginDeleteMission(int missionID, string author, string password, AsyncCallback callback, object asyncState)
    {
        return BeginInvoke("DeleteMission", new object[] { missionID, author, password }, callback, asyncState);
    }

    /// <remarks/>
    public IAsyncResult BeginGetMission(string missionName, AsyncCallback callback, object asyncState)
    {
        return BeginInvoke("GetMission", new object[] { missionName }, callback, asyncState);
    }

    /// <remarks/>
    public IAsyncResult BeginGetMissionByID(int missionID, AsyncCallback callback, object asyncState)
    {
        return BeginInvoke("GetMissionByID", new object[] { missionID }, callback, asyncState);
    }

    /// <remarks/>
    public IAsyncResult BeginGetScores(int missionID, AsyncCallback callback, object asyncState)
    {
        return BeginInvoke("GetScores", new object[] { missionID }, callback, asyncState);
    }

    /// <remarks/>
    public IAsyncResult BeginListComments(int missionID, AsyncCallback callback, object asyncState)
    {
        return BeginInvoke("ListComments", new object[] { missionID }, callback, asyncState);
    }

    /// <remarks/>
    public IAsyncResult BeginListMissionInfos(AsyncCallback callback, object asyncState)
    {
        return BeginInvoke("ListMissionInfos", new object[0], callback, asyncState);
    }

    /// <remarks/>
    public IAsyncResult BeginRate(int missionID, double rating, AsyncCallback callback, object asyncState)
    {
        return BeginInvoke("Rate", new object[] { missionID, rating }, callback, asyncState);
    }

    /// <remarks/>
    public IAsyncResult BeginSendMission(MissionData mission, string author, string password, AsyncCallback callback, object asyncState)
    {
        return BeginInvoke("SendMission", new object[] { mission, author, password }, callback, asyncState);
    }

    /// <remarks/>
    public IAsyncResult BeginSubmitScore(string missionName, string playerName, int score, int timeSeconds, AsyncCallback callback, object asyncState)
    {
        return BeginInvoke("SubmitScore", new object[] { missionName, playerName, score, timeSeconds }, callback, asyncState);
    }

    /// <remarks/>
    public new void CancelAsync(object userState)
    {
        base.CancelAsync(userState);
    }

    /// <remarks/>
    [SoapDocumentMethod("http://SpringMissionEditor/DeleteMission", RequestNamespace = "http://SpringMissionEditor/",
        ResponseNamespace = "http://SpringMissionEditor/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void DeleteMission(int missionID, string author, string password)
    {
        Invoke("DeleteMission", new object[] { missionID, author, password });
    }

    /// <remarks/>
    public void DeleteMissionAsync(int missionID, string author, string password)
    {
        DeleteMissionAsync(missionID, author, password, null);
    }

    /// <remarks/>
    public void DeleteMissionAsync(int missionID, string author, string password, object userState)
    {
        if ((DeleteMissionOperationCompleted == null)) DeleteMissionOperationCompleted = new SendOrPostCallback(OnDeleteMissionOperationCompleted);
        InvokeAsync("DeleteMission", new object[] { missionID, author, password }, DeleteMissionOperationCompleted, userState);
    }

    /// <remarks/>
    public void EndAddComment(IAsyncResult asyncResult)
    {
        EndInvoke(asyncResult);
    }

    /// <remarks/>
    public void EndDeleteMission(IAsyncResult asyncResult)
    {
        EndInvoke(asyncResult);
    }

    /// <remarks/>
    public MissionData EndGetMission(IAsyncResult asyncResult)
    {
        var results = EndInvoke(asyncResult);
        return ((MissionData)(results[0]));
    }

    /// <remarks/>
    public MissionData EndGetMissionByID(IAsyncResult asyncResult)
    {
        var results = EndInvoke(asyncResult);
        return ((MissionData)(results[0]));
    }

    /// <remarks/>
    public ScoreEntry[] EndGetScores(IAsyncResult asyncResult)
    {
        var results = EndInvoke(asyncResult);
        return ((ScoreEntry[])(results[0]));
    }

    /// <remarks/>
    public CommentInfo[] EndListComments(IAsyncResult asyncResult)
    {
        var results = EndInvoke(asyncResult);
        return ((CommentInfo[])(results[0]));
    }

    /// <remarks/>
    public MissionInfo[] EndListMissionInfos(IAsyncResult asyncResult)
    {
        var results = EndInvoke(asyncResult);
        return ((MissionInfo[])(results[0]));
    }

    /// <remarks/>
    public void EndRate(IAsyncResult asyncResult)
    {
        EndInvoke(asyncResult);
    }

    /// <remarks/>
    public void EndSendMission(IAsyncResult asyncResult)
    {
        EndInvoke(asyncResult);
    }

    /// <remarks/>
    public void EndSubmitScore(IAsyncResult asyncResult)
    {
        EndInvoke(asyncResult);
    }

    /// <remarks/>
    [SoapDocumentMethod("http://SpringMissionEditor/GetMission", RequestNamespace = "http://SpringMissionEditor/",
        ResponseNamespace = "http://SpringMissionEditor/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public MissionData GetMission(string missionName)
    {
        var results = Invoke("GetMission", new object[] { missionName });
        return ((MissionData)(results[0]));
    }

    /// <remarks/>
    public void GetMissionAsync(string missionName)
    {
        GetMissionAsync(missionName, null);
    }

    /// <remarks/>
    public void GetMissionAsync(string missionName, object userState)
    {
        if ((GetMissionOperationCompleted == null)) GetMissionOperationCompleted = new SendOrPostCallback(OnGetMissionOperationCompleted);
        InvokeAsync("GetMission", new object[] { missionName }, GetMissionOperationCompleted, userState);
    }

    /// <remarks/>
    [SoapDocumentMethod("http://SpringMissionEditor/GetMissionByID", RequestNamespace = "http://SpringMissionEditor/",
        ResponseNamespace = "http://SpringMissionEditor/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public MissionData GetMissionByID(int missionID)
    {
        var results = Invoke("GetMissionByID", new object[] { missionID });
        return ((MissionData)(results[0]));
    }

    /// <remarks/>
    public void GetMissionByIDAsync(int missionID)
    {
        GetMissionByIDAsync(missionID, null);
    }

    /// <remarks/>
    public void GetMissionByIDAsync(int missionID, object userState)
    {
        if ((GetMissionByIDOperationCompleted == null)) GetMissionByIDOperationCompleted = new SendOrPostCallback(OnGetMissionByIDOperationCompleted);
        InvokeAsync("GetMissionByID", new object[] { missionID }, GetMissionByIDOperationCompleted, userState);
    }

    /// <remarks/>
    [SoapDocumentMethod("http://SpringMissionEditor/GetScores", RequestNamespace = "http://SpringMissionEditor/",
        ResponseNamespace = "http://SpringMissionEditor/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public ScoreEntry[] GetScores(int missionID)
    {
        var results = Invoke("GetScores", new object[] { missionID });
        return ((ScoreEntry[])(results[0]));
    }

    /// <remarks/>
    public void GetScoresAsync(int missionID)
    {
        GetScoresAsync(missionID, null);
    }

    /// <remarks/>
    public void GetScoresAsync(int missionID, object userState)
    {
        if ((GetScoresOperationCompleted == null)) GetScoresOperationCompleted = new SendOrPostCallback(OnGetScoresOperationCompleted);
        InvokeAsync("GetScores", new object[] { missionID }, GetScoresOperationCompleted, userState);
    }

    /// <remarks/>
    [SoapDocumentMethod("http://SpringMissionEditor/ListComments", RequestNamespace = "http://SpringMissionEditor/",
        ResponseNamespace = "http://SpringMissionEditor/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public CommentInfo[] ListComments(int missionID)
    {
        var results = Invoke("ListComments", new object[] { missionID });
        return ((CommentInfo[])(results[0]));
    }

    /// <remarks/>
    public void ListCommentsAsync(int missionID)
    {
        ListCommentsAsync(missionID, null);
    }

    /// <remarks/>
    public void ListCommentsAsync(int missionID, object userState)
    {
        if ((ListCommentsOperationCompleted == null)) ListCommentsOperationCompleted = new SendOrPostCallback(OnListCommentsOperationCompleted);
        InvokeAsync("ListComments", new object[] { missionID }, ListCommentsOperationCompleted, userState);
    }

    /// <remarks/>
    [SoapDocumentMethod("http://SpringMissionEditor/ListMissionInfos", RequestNamespace = "http://SpringMissionEditor/",
        ResponseNamespace = "http://SpringMissionEditor/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public MissionInfo[] ListMissionInfos()
    {
        var results = Invoke("ListMissionInfos", new object[0]);
        return ((MissionInfo[])(results[0]));
    }

    /// <remarks/>
    public void ListMissionInfosAsync()
    {
        ListMissionInfosAsync(null);
    }

    /// <remarks/>
    public void ListMissionInfosAsync(object userState)
    {
        if ((ListMissionInfosOperationCompleted == null)) ListMissionInfosOperationCompleted = new SendOrPostCallback(OnListMissionInfosOperationCompleted);
        InvokeAsync("ListMissionInfos", new object[0], ListMissionInfosOperationCompleted, userState);
    }

    /// <remarks/>
    [SoapDocumentMethod("http://SpringMissionEditor/Rate", RequestNamespace = "http://SpringMissionEditor/",
        ResponseNamespace = "http://SpringMissionEditor/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void Rate(int missionID, double rating)
    {
        Invoke("Rate", new object[] { missionID, rating });
    }

    /// <remarks/>
    public void RateAsync(int missionID, double rating)
    {
        RateAsync(missionID, rating, null);
    }

    /// <remarks/>
    public void RateAsync(int missionID, double rating, object userState)
    {
        if ((RateOperationCompleted == null)) RateOperationCompleted = new SendOrPostCallback(OnRateOperationCompleted);
        InvokeAsync("Rate", new object[] { missionID, rating }, RateOperationCompleted, userState);
    }

    /// <remarks/>
    [SoapDocumentMethod("http://SpringMissionEditor/SendMission", RequestNamespace = "http://SpringMissionEditor/",
        ResponseNamespace = "http://SpringMissionEditor/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SendMission(MissionData mission, string author, string password)
    {
        Invoke("SendMission", new object[] { mission, author, password });
    }

    /// <remarks/>
    public void SendMissionAsync(MissionData mission, string author, string password)
    {
        SendMissionAsync(mission, author, password, null);
    }

    /// <remarks/>
    public void SendMissionAsync(MissionData mission, string author, string password, object userState)
    {
        if ((SendMissionOperationCompleted == null)) SendMissionOperationCompleted = new SendOrPostCallback(OnSendMissionOperationCompleted);
        InvokeAsync("SendMission", new object[] { mission, author, password }, SendMissionOperationCompleted, userState);
    }

    /// <remarks/>
    [SoapDocumentMethod("http://SpringMissionEditor/SubmitScore", RequestNamespace = "http://SpringMissionEditor/",
        ResponseNamespace = "http://SpringMissionEditor/", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Wrapped)]
    public void SubmitScore(string missionName, string playerName, int score, int timeSeconds)
    {
        Invoke("SubmitScore", new object[] { missionName, playerName, score, timeSeconds });
    }

    /// <remarks/>
    public void SubmitScoreAsync(string missionName, string playerName, int score, int timeSeconds)
    {
        SubmitScoreAsync(missionName, playerName, score, timeSeconds, null);
    }

    /// <remarks/>
    public void SubmitScoreAsync(string missionName, string playerName, int score, int timeSeconds, object userState)
    {
        if ((SubmitScoreOperationCompleted == null)) SubmitScoreOperationCompleted = new SendOrPostCallback(OnSubmitScoreOperationCompleted);
        InvokeAsync("SubmitScore", new object[] { missionName, playerName, score, timeSeconds }, SubmitScoreOperationCompleted, userState);
    }

    void OnAddCommentOperationCompleted(object arg)
    {
        if ((AddCommentCompleted != null))
        {
            var invokeArgs = ((InvokeCompletedEventArgs)(arg));
            AddCommentCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    void OnDeleteMissionOperationCompleted(object arg)
    {
        if ((DeleteMissionCompleted != null))
        {
            var invokeArgs = ((InvokeCompletedEventArgs)(arg));
            DeleteMissionCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    void OnGetMissionByIDOperationCompleted(object arg)
    {
        if ((GetMissionByIDCompleted != null))
        {
            var invokeArgs = ((InvokeCompletedEventArgs)(arg));
            GetMissionByIDCompleted(this,
                                    new GetMissionByIDCompletedEventArgs(invokeArgs.Results,
                                                                         invokeArgs.Error,
                                                                         invokeArgs.Cancelled,
                                                                         invokeArgs.UserState));
        }
    }

    void OnGetMissionOperationCompleted(object arg)
    {
        if ((GetMissionCompleted != null))
        {
            var invokeArgs = ((InvokeCompletedEventArgs)(arg));
            GetMissionCompleted(this,
                                new GetMissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    void OnGetScoresOperationCompleted(object arg)
    {
        if ((GetScoresCompleted != null))
        {
            var invokeArgs = ((InvokeCompletedEventArgs)(arg));
            GetScoresCompleted(this, new GetScoresCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    void OnListCommentsOperationCompleted(object arg)
    {
        if ((ListCommentsCompleted != null))
        {
            var invokeArgs = ((InvokeCompletedEventArgs)(arg));
            ListCommentsCompleted(this,
                                  new ListCommentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    void OnListMissionInfosOperationCompleted(object arg)
    {
        if ((ListMissionInfosCompleted != null))
        {
            var invokeArgs = ((InvokeCompletedEventArgs)(arg));
            ListMissionInfosCompleted(this,
                                      new ListMissionInfosCompletedEventArgs(invokeArgs.Results,
                                                                             invokeArgs.Error,
                                                                             invokeArgs.Cancelled,
                                                                             invokeArgs.UserState));
        }
    }

    void OnRateOperationCompleted(object arg)
    {
        if ((RateCompleted != null))
        {
            var invokeArgs = ((InvokeCompletedEventArgs)(arg));
            RateCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    void OnSendMissionOperationCompleted(object arg)
    {
        if ((SendMissionCompleted != null))
        {
            var invokeArgs = ((InvokeCompletedEventArgs)(arg));
            SendMissionCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    void OnSubmitScoreOperationCompleted(object arg)
    {
        if ((SubmitScoreCompleted != null))
        {
            var invokeArgs = ((InvokeCompletedEventArgs)(arg));
            SubmitScoreCompleted(this, new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
}

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
[Serializable()]
[DebuggerStepThrough()]
[DesignerCategory("code")]
[XmlType(Namespace = "http://SpringMissionEditor/")]
public partial class MissionData
{
    MissionInfo missionInfoField;

    byte[] mutatorField;

    /// <remarks/>
    public MissionInfo MissionInfo { get { return missionInfoField; } set { missionInfoField = value; } }

    /// <remarks/>
    [XmlElement(DataType = "base64Binary")]
    public byte[] Mutator { get { return mutatorField; } set { mutatorField = value; } }
}

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
[Serializable()]
[DebuggerStepThrough()]
[DesignerCategory("code")]
[XmlType(Namespace = "http://SpringMissionEditor/")]
public partial class MissionInfo
{
    string authorField;

    int commentCountField;

    Nullable<DateTime> createdTimeField;

    string descriptionField;

    int downloadCountField;

    byte[] imageField;

    Nullable<DateTime> lastCommentTimeField;

    string mapField;

    int missionIDField;

    string modField;

    Nullable<DateTime> modifiedTimeField;

    string nameField;

    double ratingField;

    string scoringMethodField;

    string topScoreLineField;

    /// <remarks/>
    public string Author { get { return authorField; } set { authorField = value; } }

    /// <remarks/>
    public int CommentCount { get { return commentCountField; } set { commentCountField = value; } }

    /// <remarks/>
    [XmlElement(IsNullable = true)]
    public Nullable<DateTime> CreatedTime { get { return createdTimeField; } set { createdTimeField = value; } }

    /// <remarks/>
    public string Description { get { return descriptionField; } set { descriptionField = value; } }

    /// <remarks/>
    public int DownloadCount { get { return downloadCountField; } set { downloadCountField = value; } }

    /// <remarks/>
    [XmlElement(DataType = "base64Binary")]
    public byte[] Image { get { return imageField; } set { imageField = value; } }

    /// <remarks/>
    [XmlElement(IsNullable = true)]
    public Nullable<DateTime> LastCommentTime { get { return lastCommentTimeField; } set { lastCommentTimeField = value; } }

    /// <remarks/>
    public string Map { get { return mapField; } set { mapField = value; } }

    /// <remarks/>
    public int MissionID { get { return missionIDField; } set { missionIDField = value; } }

    /// <remarks/>
    public string Mod { get { return modField; } set { modField = value; } }

    /// <remarks/>
    [XmlElement(IsNullable = true)]
    public Nullable<DateTime> ModifiedTime { get { return modifiedTimeField; } set { modifiedTimeField = value; } }

    /// <remarks/>
    public string Name { get { return nameField; } set { nameField = value; } }

    /// <remarks/>
    public double Rating { get { return ratingField; } set { ratingField = value; } }

    /// <remarks/>
    public string ScoringMethod { get { return scoringMethodField; } set { scoringMethodField = value; } }

    /// <remarks/>
    public string TopScoreLine { get { return topScoreLineField; } set { topScoreLineField = value; } }
}

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
[Serializable()]
[DebuggerStepThrough()]
[DesignerCategory("code")]
[XmlType(Namespace = "http://SpringMissionEditor/")]
public partial class CommentInfo
{
    string nickField;

    string textField;

    DateTime timeField;

    /// <remarks/>
    public string Nick { get { return nickField; } set { nickField = value; } }

    /// <remarks/>
    public string Text { get { return textField; } set { textField = value; } }

    /// <remarks/>
    public DateTime Time { get { return timeField; } set { timeField = value; } }
}

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
[Serializable()]
[DebuggerStepThrough()]
[DesignerCategory("code")]
[XmlType(Namespace = "http://SpringMissionEditor/")]
public partial class ScoreEntry
{
    string playerNameField;

    int scoreField;

    int timeSecondsField;

    /// <remarks/>
    public string PlayerName { get { return playerNameField; } set { playerNameField = value; } }

    /// <remarks/>
    public int Score { get { return scoreField; } set { scoreField = value; } }

    /// <remarks/>
    public int TimeSeconds { get { return timeSecondsField; } set { timeSecondsField = value; } }
}

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
public delegate void AddCommentCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
public delegate void DeleteMissionCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
public delegate void GetMissionCompletedEventHandler(object sender, GetMissionCompletedEventArgs e);

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
[DebuggerStepThrough()]
[DesignerCategory("code")]
public partial class GetMissionCompletedEventArgs: AsyncCompletedEventArgs
{
    object[] results;

    /// <remarks/>
    public MissionData Result
    {
        get
        {
            RaiseExceptionIfNecessary();
            return ((MissionData)(results[0]));
        }
    }

    internal GetMissionCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
        : base(exception, cancelled, userState)
    {
        this.results = results;
    }
}

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
public delegate void GetMissionByIDCompletedEventHandler(object sender, GetMissionByIDCompletedEventArgs e);

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
[DebuggerStepThrough()]
[DesignerCategory("code")]
public partial class GetMissionByIDCompletedEventArgs: AsyncCompletedEventArgs
{
    object[] results;

    /// <remarks/>
    public MissionData Result
    {
        get
        {
            RaiseExceptionIfNecessary();
            return ((MissionData)(results[0]));
        }
    }

    internal GetMissionByIDCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
        : base(exception, cancelled, userState)
    {
        this.results = results;
    }
}

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
public delegate void GetScoresCompletedEventHandler(object sender, GetScoresCompletedEventArgs e);

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
[DebuggerStepThrough()]
[DesignerCategory("code")]
public partial class GetScoresCompletedEventArgs: AsyncCompletedEventArgs
{
    object[] results;

    /// <remarks/>
    public ScoreEntry[] Result
    {
        get
        {
            RaiseExceptionIfNecessary();
            return ((ScoreEntry[])(results[0]));
        }
    }

    internal GetScoresCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
        : base(exception, cancelled, userState)
    {
        this.results = results;
    }
}

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
public delegate void ListCommentsCompletedEventHandler(object sender, ListCommentsCompletedEventArgs e);

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
[DebuggerStepThrough()]
[DesignerCategory("code")]
public partial class ListCommentsCompletedEventArgs: AsyncCompletedEventArgs
{
    object[] results;

    /// <remarks/>
    public CommentInfo[] Result
    {
        get
        {
            RaiseExceptionIfNecessary();
            return ((CommentInfo[])(results[0]));
        }
    }

    internal ListCommentsCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
        : base(exception, cancelled, userState)
    {
        this.results = results;
    }
}

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
public delegate void ListMissionInfosCompletedEventHandler(object sender, ListMissionInfosCompletedEventArgs e);

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
[DebuggerStepThrough()]
[DesignerCategory("code")]
public partial class ListMissionInfosCompletedEventArgs: AsyncCompletedEventArgs
{
    object[] results;

    /// <remarks/>
    public MissionInfo[] Result
    {
        get
        {
            RaiseExceptionIfNecessary();
            return ((MissionInfo[])(results[0]));
        }
    }

    internal ListMissionInfosCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
        : base(exception, cancelled, userState)
    {
        this.results = results;
    }
}

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
public delegate void RateCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
public delegate void SendMissionCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

/// <remarks/>
[GeneratedCode("wsdl", "2.0.50727.3038")]
public delegate void SubmitScoreCompletedEventHandler(object sender, AsyncCompletedEventArgs e);