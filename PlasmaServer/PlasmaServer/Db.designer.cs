#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PlasmaServer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PlasmaServer")]
	public partial class DbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDependency(Dependency instance);
    partial void UpdateDependency(Dependency instance);
    partial void DeleteDependency(Dependency instance);
    partial void InsertResourceSpringHash(ResourceSpringHash instance);
    partial void UpdateResourceSpringHash(ResourceSpringHash instance);
    partial void DeleteResourceSpringHash(ResourceSpringHash instance);
    partial void InsertResourceContentFile(ResourceContentFile instance);
    partial void UpdateResourceContentFile(ResourceContentFile instance);
    partial void DeleteResourceContentFile(ResourceContentFile instance);
    partial void InsertResource(Resource instance);
    partial void UpdateResource(Resource instance);
    partial void DeleteResource(Resource instance);
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    #endregion
		
		public DbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PlasmaServerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Dependency> Dependencies
		{
			get
			{
				return this.GetTable<Dependency>();
			}
		}
		
		public System.Data.Linq.Table<ResourceSpringHash> ResourceSpringHashes
		{
			get
			{
				return this.GetTable<ResourceSpringHash>();
			}
		}
		
		public System.Data.Linq.Table<ResourceContentFile> ResourceContentFiles
		{
			get
			{
				return this.GetTable<ResourceContentFile>();
			}
		}
		
		public System.Data.Linq.Table<Resource> Resources
		{
			get
			{
				return this.GetTable<Resource>();
			}
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dependency")]
	public partial class Dependency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResourceID;
		
		private string _NeedsInternalName;
		
		private EntityRef<Resource> _Resource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIDChanging(int value);
    partial void OnResourceIDChanged();
    partial void OnNeedsInternalNameChanging(string value);
    partial void OnNeedsInternalNameChanged();
    #endregion
		
		public Dependency()
		{
			this._Resource = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ResourceID
		{
			get
			{
				return this._ResourceID;
			}
			set
			{
				if ((this._ResourceID != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIDChanging(value);
					this.SendPropertyChanging();
					this._ResourceID = value;
					this.SendPropertyChanged("ResourceID");
					this.OnResourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NeedsInternalName", DbType="VarChar(250) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string NeedsInternalName
		{
			get
			{
				return this._NeedsInternalName;
			}
			set
			{
				if ((this._NeedsInternalName != value))
				{
					this.OnNeedsInternalNameChanging(value);
					this.SendPropertyChanging();
					this._NeedsInternalName = value;
					this.SendPropertyChanged("NeedsInternalName");
					this.OnNeedsInternalNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_Dependency", Storage="_Resource", ThisKey="ResourceID", OtherKey="ResourceID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.Dependencies.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.Dependencies.Add(this);
						this._ResourceID = value.ResourceID;
					}
					else
					{
						this._ResourceID = default(int);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResourceSpringHash")]
	public partial class ResourceSpringHash : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResourceID;
		
		private string _SpringVersion;
		
		private int _SpringHash;
		
		private EntityRef<Resource> _Resource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIDChanging(int value);
    partial void OnResourceIDChanged();
    partial void OnSpringVersionChanging(string value);
    partial void OnSpringVersionChanged();
    partial void OnSpringHashChanging(int value);
    partial void OnSpringHashChanged();
    #endregion
		
		public ResourceSpringHash()
		{
			this._Resource = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ResourceID
		{
			get
			{
				return this._ResourceID;
			}
			set
			{
				if ((this._ResourceID != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIDChanging(value);
					this.SendPropertyChanging();
					this._ResourceID = value;
					this.SendPropertyChanged("ResourceID");
					this.OnResourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpringVersion", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SpringVersion
		{
			get
			{
				return this._SpringVersion;
			}
			set
			{
				if ((this._SpringVersion != value))
				{
					this.OnSpringVersionChanging(value);
					this.SendPropertyChanging();
					this._SpringVersion = value;
					this.SendPropertyChanged("SpringVersion");
					this.OnSpringVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpringHash", DbType="Int NOT NULL")]
		public int SpringHash
		{
			get
			{
				return this._SpringHash;
			}
			set
			{
				if ((this._SpringHash != value))
				{
					this.OnSpringHashChanging(value);
					this.SendPropertyChanging();
					this._SpringHash = value;
					this.SendPropertyChanged("SpringHash");
					this.OnSpringHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourceSpringHash", Storage="_Resource", ThisKey="ResourceID", OtherKey="ResourceID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.ResourceSpringHashes.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.ResourceSpringHashes.Add(this);
						this._ResourceID = value.ResourceID;
					}
					else
					{
						this._ResourceID = default(int);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResourceContentFile")]
	public partial class ResourceContentFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResourceID;
		
		private string _Md5;
		
		private int _Length;
		
		private string _FileName;
		
		private string _Links;
		
		private int _LinkCount;
		
		private EntityRef<Resource> _Resource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIDChanging(int value);
    partial void OnResourceIDChanged();
    partial void OnMd5Changing(string value);
    partial void OnMd5Changed();
    partial void OnLengthChanging(int value);
    partial void OnLengthChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnLinksChanging(string value);
    partial void OnLinksChanged();
    partial void OnLinkCountChanging(int value);
    partial void OnLinkCountChanged();
    #endregion
		
		public ResourceContentFile()
		{
			this._Resource = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ResourceID
		{
			get
			{
				return this._ResourceID;
			}
			set
			{
				if ((this._ResourceID != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIDChanging(value);
					this.SendPropertyChanging();
					this._ResourceID = value;
					this.SendPropertyChanged("ResourceID");
					this.OnResourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Md5", DbType="Char(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Md5
		{
			get
			{
				return this._Md5;
			}
			set
			{
				if ((this._Md5 != value))
				{
					this.OnMd5Changing(value);
					this.SendPropertyChanging();
					this._Md5 = value;
					this.SendPropertyChanged("Md5");
					this.OnMd5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Int NOT NULL")]
		public int Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Links", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Links
		{
			get
			{
				return this._Links;
			}
			set
			{
				if ((this._Links != value))
				{
					this.OnLinksChanging(value);
					this.SendPropertyChanging();
					this._Links = value;
					this.SendPropertyChanged("Links");
					this.OnLinksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkCount", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LinkCount
		{
			get
			{
				return this._LinkCount;
			}
			set
			{
				if ((this._LinkCount != value))
				{
					this.OnLinkCountChanging(value);
					this.SendPropertyChanging();
					this._LinkCount = value;
					this.SendPropertyChanged("LinkCount");
					this.OnLinkCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourceContentFile", Storage="_Resource", ThisKey="ResourceID", OtherKey="ResourceID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.ResourceContentFiles.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.ResourceContentFiles.Add(this);
						this._ResourceID = value.ResourceID;
					}
					else
					{
						this._ResourceID = default(int);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Resource")]
	public partial class Resource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResourceID;
		
		private string _InternalName;
		
		private ResourceType _TypeID;
		
		private System.Nullable<System.DateTime> _LastLinkCheck;
		
		private int _DownloadCount;
		
		private int _NoLinkDownloadCount;
		
		private EntitySet<Dependency> _Dependencies;
		
		private EntitySet<ResourceSpringHash> _ResourceSpringHashes;
		
		private EntitySet<ResourceContentFile> _ResourceContentFiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIDChanging(int value);
    partial void OnResourceIDChanged();
    partial void OnInternalNameChanging(string value);
    partial void OnInternalNameChanged();
    partial void OnTypeIDChanging(ResourceType value);
    partial void OnTypeIDChanged();
    partial void OnLastLinkCheckChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLinkCheckChanged();
    partial void OnDownloadCountChanging(int value);
    partial void OnDownloadCountChanged();
    partial void OnNoLinkDownloadCountChanging(int value);
    partial void OnNoLinkDownloadCountChanged();
    #endregion
		
		public Resource()
		{
			this._Dependencies = new EntitySet<Dependency>(new Action<Dependency>(this.attach_Dependencies), new Action<Dependency>(this.detach_Dependencies));
			this._ResourceSpringHashes = new EntitySet<ResourceSpringHash>(new Action<ResourceSpringHash>(this.attach_ResourceSpringHashes), new Action<ResourceSpringHash>(this.detach_ResourceSpringHashes));
			this._ResourceContentFiles = new EntitySet<ResourceContentFile>(new Action<ResourceContentFile>(this.attach_ResourceContentFiles), new Action<ResourceContentFile>(this.detach_ResourceContentFiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResourceID
		{
			get
			{
				return this._ResourceID;
			}
			set
			{
				if ((this._ResourceID != value))
				{
					this.OnResourceIDChanging(value);
					this.SendPropertyChanging();
					this._ResourceID = value;
					this.SendPropertyChanged("ResourceID");
					this.OnResourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternalName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string InternalName
		{
			get
			{
				return this._InternalName;
			}
			set
			{
				if ((this._InternalName != value))
				{
					this.OnInternalNameChanging(value);
					this.SendPropertyChanging();
					this._InternalName = value;
					this.SendPropertyChanged("InternalName");
					this.OnInternalNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL", CanBeNull=false)]
		public ResourceType TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLinkCheck", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastLinkCheck
		{
			get
			{
				return this._LastLinkCheck;
			}
			set
			{
				if ((this._LastLinkCheck != value))
				{
					this.OnLastLinkCheckChanging(value);
					this.SendPropertyChanging();
					this._LastLinkCheck = value;
					this.SendPropertyChanged("LastLinkCheck");
					this.OnLastLinkCheckChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DownloadCount", DbType="int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int DownloadCount
		{
			get
			{
				return this._DownloadCount;
			}
			set
			{
				if ((this._DownloadCount != value))
				{
					this.OnDownloadCountChanging(value);
					this.SendPropertyChanging();
					this._DownloadCount = value;
					this.SendPropertyChanged("DownloadCount");
					this.OnDownloadCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoLinkDownloadCount", DbType="int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int NoLinkDownloadCount
		{
			get
			{
				return this._NoLinkDownloadCount;
			}
			set
			{
				if ((this._NoLinkDownloadCount != value))
				{
					this.OnNoLinkDownloadCountChanging(value);
					this.SendPropertyChanging();
					this._NoLinkDownloadCount = value;
					this.SendPropertyChanged("NoLinkDownloadCount");
					this.OnNoLinkDownloadCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_Dependency", Storage="_Dependencies", ThisKey="ResourceID", OtherKey="ResourceID")]
		public EntitySet<Dependency> Dependencies
		{
			get
			{
				return this._Dependencies;
			}
			set
			{
				this._Dependencies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourceSpringHash", Storage="_ResourceSpringHashes", ThisKey="ResourceID", OtherKey="ResourceID")]
		public EntitySet<ResourceSpringHash> ResourceSpringHashes
		{
			get
			{
				return this._ResourceSpringHashes;
			}
			set
			{
				this._ResourceSpringHashes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourceContentFile", Storage="_ResourceContentFiles", ThisKey="ResourceID", OtherKey="ResourceID")]
		public EntitySet<ResourceContentFile> ResourceContentFiles
		{
			get
			{
				return this._ResourceContentFiles;
			}
			set
			{
				this._ResourceContentFiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dependencies(Dependency entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_Dependencies(Dependency entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
		
		private void attach_ResourceSpringHashes(ResourceSpringHash entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_ResourceSpringHashes(ResourceSpringHash entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
		
		private void attach_ResourceContentFiles(ResourceContentFile entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_ResourceContentFiles(ResourceContentFile entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Admin]")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Login;
		
		private string _Password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Admin()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="AdminID", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="varchar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="varchar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
